{"id":"../node_modules/libmime/lib/charset.js","dependencies":[{"name":"/var/www/html/StMichel/package.json","includedInParent":true,"mtime":1602507593919},{"name":"/var/www/html/StMichel/node_modules/libmime/package.json","includedInParent":true,"mtime":1602507588612},{"name":"iconv-lite","loc":{"line":3,"column":22},"parent":"/var/www/html/StMichel/node_modules/libmime/lib/charset.js","resolved":"/var/www/html/StMichel/node_modules/iconv-lite/lib/index.js"},{"name":"encoding-japanese","loc":{"line":4,"column":33},"parent":"/var/www/html/StMichel/node_modules/libmime/lib/charset.js","resolved":"/var/www/html/StMichel/node_modules/encoding-japanese/src/index.js"},{"name":"./charsets","loc":{"line":5,"column":25},"parent":"/var/www/html/StMichel/node_modules/libmime/lib/charset.js","resolved":"/var/www/html/StMichel/node_modules/libmime/lib/charsets.js"},{"name":"buffer","parent":"/var/www/html/StMichel/node_modules/libmime/lib/charset.js","resolved":"/home/etudiant/.npm-packages/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nconst iconv = require('iconv-lite');\nconst encodingJapanese = require('encoding-japanese');\nconst charsets = require('./charsets');\n\n/**\n * Character set encoding and decoding functions\n */\nconst charset = (module.exports = {\n    /**\n     * Encodes an unicode string into an Buffer object as UTF-8\n     *\n     * We force UTF-8 here, no strange encodings allowed.\n     *\n     * @param {String} str String to be encoded\n     * @return {Buffer} UTF-8 encoded typed array\n     */\n    encode(str) {\n        return Buffer.from(str, 'utf-8');\n    },\n\n    /**\n     * Decodes a string from Buffer to an unicode string using specified encoding\n     * NB! Throws if unknown charset is used\n     *\n     * @param {Buffer} buf Binary data to be decoded\n     * @param {String} [fromCharset='UTF-8'] Binary data is decoded into string using this charset\n     * @return {String} Decded string\n     */\n    decode(buf, fromCharset) {\n        fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n\n        if (/^(us-)?ascii|utf-8|7bit$/i.test(fromCharset)) {\n            return buf.toString('utf-8');\n        }\n\n        try {\n            if (/^jis|^iso-?2022-?jp|^EUCJP/i.test(fromCharset)) {\n                if (typeof buf === 'string') {\n                    buf = Buffer.from(buf);\n                }\n                try {\n                    let output = encodingJapanese.convert(buf, {\n                        to: 'UNICODE',\n                        from: fromCharset,\n                        type: 'string'\n                    });\n                    if (typeof output === 'string') {\n                        output = Buffer.from(output);\n                    }\n                    return output;\n                } catch (err) {\n                    // ignore, defaults to iconv-lite on error\n                }\n            }\n\n            return iconv.decode(buf, fromCharset);\n        } catch (err) {\n            // enforce utf-8, data loss might occur\n            return buf.toString();\n        }\n    },\n\n    /**\n     * Convert a string from specific encoding to UTF-8 Buffer\n     *\n     * @param {String|Buffer} str String to be encoded\n     * @param {String} [fromCharset='UTF-8'] Source encoding for the string\n     * @return {Buffer} UTF-8 encoded typed array\n     */\n    convert(data, fromCharset) {\n        fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n\n        let bufString;\n\n        if (typeof data !== 'string') {\n            if (/^(us-)?ascii|utf-8|7bit$/i.test(fromCharset)) {\n                return data;\n            }\n\n            bufString = charset.decode(data, fromCharset);\n            return charset.encode(bufString);\n        }\n        return charset.encode(data);\n    },\n\n    /**\n     * Converts well known invalid character set names to proper names.\n     * eg. win-1257 will be converted to WINDOWS-1257\n     *\n     * @param {String} charset Charset name to convert\n     * @return {String} Canoninicalized charset name\n     */\n    normalizeCharset(charset) {\n        charset = charset.toLowerCase().trim();\n\n        // first pass\n        if (charsets.hasOwnProperty(charset) && charsets[charset]) {\n            return charsets[charset];\n        }\n\n        charset = charset\n            .replace(/^utf[-_]?(\\d+)/, 'utf-$1')\n            .replace(/^(?:us[-_]?)ascii/, 'windows-1252')\n            .replace(/^win(?:dows)?[-_]?(\\d+)/, 'windows-$1')\n            .replace(/^(?:latin|iso[-_]?8859)?[-_]?(\\d+)/, 'iso-8859-$1')\n            .replace(/^l[-_]?(\\d+)/, 'iso-8859-$1');\n\n        // updated pass\n        if (charsets.hasOwnProperty(charset) && charsets[charset]) {\n            return charsets[charset];\n        }\n\n        return charset.toUpperCase();\n    }\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/libmime/lib/charset.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/libmime/lib/charset.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}}],"sources":{"../node_modules/libmime/lib/charset.js":"'use strict';\n\nconst iconv = require('iconv-lite');\nconst encodingJapanese = require('encoding-japanese');\nconst charsets = require('./charsets');\n\n/**\n * Character set encoding and decoding functions\n */\nconst charset = (module.exports = {\n    /**\n     * Encodes an unicode string into an Buffer object as UTF-8\n     *\n     * We force UTF-8 here, no strange encodings allowed.\n     *\n     * @param {String} str String to be encoded\n     * @return {Buffer} UTF-8 encoded typed array\n     */\n    encode(str) {\n        return Buffer.from(str, 'utf-8');\n    },\n\n    /**\n     * Decodes a string from Buffer to an unicode string using specified encoding\n     * NB! Throws if unknown charset is used\n     *\n     * @param {Buffer} buf Binary data to be decoded\n     * @param {String} [fromCharset='UTF-8'] Binary data is decoded into string using this charset\n     * @return {String} Decded string\n     */\n    decode(buf, fromCharset) {\n        fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n\n        if (/^(us-)?ascii|utf-8|7bit$/i.test(fromCharset)) {\n            return buf.toString('utf-8');\n        }\n\n        try {\n            if (/^jis|^iso-?2022-?jp|^EUCJP/i.test(fromCharset)) {\n                if (typeof buf === 'string') {\n                    buf = Buffer.from(buf);\n                }\n                try {\n                    let output = encodingJapanese.convert(buf, {\n                        to: 'UNICODE',\n                        from: fromCharset,\n                        type: 'string'\n                    });\n                    if (typeof output === 'string') {\n                        output = Buffer.from(output);\n                    }\n                    return output;\n                } catch (err) {\n                    // ignore, defaults to iconv-lite on error\n                }\n            }\n\n            return iconv.decode(buf, fromCharset);\n        } catch (err) {\n            // enforce utf-8, data loss might occur\n            return buf.toString();\n        }\n    },\n\n    /**\n     * Convert a string from specific encoding to UTF-8 Buffer\n     *\n     * @param {String|Buffer} str String to be encoded\n     * @param {String} [fromCharset='UTF-8'] Source encoding for the string\n     * @return {Buffer} UTF-8 encoded typed array\n     */\n    convert(data, fromCharset) {\n        fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n\n        let bufString;\n\n        if (typeof data !== 'string') {\n            if (/^(us-)?ascii|utf-8|7bit$/i.test(fromCharset)) {\n                return data;\n            }\n\n            bufString = charset.decode(data, fromCharset);\n            return charset.encode(bufString);\n        }\n        return charset.encode(data);\n    },\n\n    /**\n     * Converts well known invalid character set names to proper names.\n     * eg. win-1257 will be converted to WINDOWS-1257\n     *\n     * @param {String} charset Charset name to convert\n     * @return {String} Canoninicalized charset name\n     */\n    normalizeCharset(charset) {\n        charset = charset.toLowerCase().trim();\n\n        // first pass\n        if (charsets.hasOwnProperty(charset) && charsets[charset]) {\n            return charsets[charset];\n        }\n\n        charset = charset\n            .replace(/^utf[-_]?(\\d+)/, 'utf-$1')\n            .replace(/^(?:us[-_]?)ascii/, 'windows-1252')\n            .replace(/^win(?:dows)?[-_]?(\\d+)/, 'windows-$1')\n            .replace(/^(?:latin|iso[-_]?8859)?[-_]?(\\d+)/, 'iso-8859-$1')\n            .replace(/^l[-_]?(\\d+)/, 'iso-8859-$1');\n\n        // updated pass\n        if (charsets.hasOwnProperty(charset) && charsets[charset]) {\n            return charsets[charset];\n        }\n\n        return charset.toUpperCase();\n    }\n});\n"},"lineCount":119}},"error":null,"hash":"7ad7209d1411773291c09dabeff074c6","cacheData":{"env":{}}}