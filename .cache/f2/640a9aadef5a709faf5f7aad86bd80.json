{"id":"../node_modules/mailsplit/lib/node-rewriter.js","dependencies":[{"name":"/var/www/html/StMichel/package.json","includedInParent":true,"mtime":1602507593919},{"name":"/var/www/html/StMichel/node_modules/mailsplit/package.json","includedInParent":true,"mtime":1602507588612},{"name":"stream","loc":{"line":5,"column":26},"parent":"/var/www/html/StMichel/node_modules/mailsplit/lib/node-rewriter.js","resolved":"/home/etudiant/.npm-packages/lib/node_modules/parcel-bundler/node_modules/stream-browserify/index.js"},{"name":"./flowed-decoder","loc":{"line":6,"column":30},"parent":"/var/www/html/StMichel/node_modules/mailsplit/lib/node-rewriter.js","resolved":"/var/www/html/StMichel/node_modules/mailsplit/lib/flowed-decoder.js"},{"name":"buffer","parent":"/var/www/html/StMichel/node_modules/mailsplit/lib/node-rewriter.js","resolved":"/home/etudiant/.npm-packages/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\n// Helper class to rewrite nodes with specific mime type\n\nconst Transform = require('stream').Transform;\nconst FlowedDecoder = require('./flowed-decoder');\n\n/**\n * NodeRewriter Transform stream. Updates content for all nodes with specified mime type\n *\n * @constructor\n * @param {String} mimeType Define the Mime-Type to look for\n * @param {Function} rewriteAction Function to run with the node content\n */\nclass NodeRewriter extends Transform {\n    constructor(filterFunc, rewriteAction) {\n        let options = {\n            readableObjectMode: true,\n            writableObjectMode: true\n        };\n        super(options);\n\n        this.filterFunc = filterFunc;\n        this.rewriteAction = rewriteAction;\n\n        this.decoder = false;\n        this.encoder = false;\n        this.continue = false;\n    }\n\n    _transform(data, encoding, callback) {\n        this.processIncoming(data, callback);\n    }\n\n    _flush(callback) {\n        if (this.decoder) {\n            // emit an empty node just in case there is pending data to end\n            return this.processIncoming(\n                {\n                    type: 'none'\n                },\n                callback\n            );\n        }\n        return callback();\n    }\n\n    processIncoming(data, callback) {\n        if (this.decoder && data.type === 'body') {\n            // data to parse\n            if (!this.decoder.write(data.value)) {\n                return this.decoder.once('drain', callback);\n            } else {\n                return callback();\n            }\n        } else if (this.decoder && data.type !== 'body') {\n            // stop decoding.\n            // we can not process the current data chunk as we need to wait until\n            // the parsed data is completely processed, so we store a reference to the\n            // continue callback\n            this.continue = () => {\n                this.continue = false;\n                this.decoder = false;\n                this.encoder = false;\n                this.processIncoming(data, callback);\n            };\n            return this.decoder.end();\n        } else if (data.type === 'node' && this.filterFunc(data)) {\n            // found matching node, create new handler\n            this.emit('node', this.createDecodePair(data));\n        } else if (this.readable && data.type !== 'none') {\n            // we don't care about this data, just pass it over to the joiner\n            this.push(data);\n        }\n        callback();\n    }\n\n    createDecodePair(node) {\n        this.decoder = node.getDecoder();\n\n        if (['base64', 'quoted-printable'].includes(node.encoding)) {\n            this.encoder = node.getEncoder();\n        } else {\n            this.encoder = node.getEncoder('quoted-printable');\n        }\n\n        let lastByte = false;\n\n        let decoder = this.decoder;\n        let encoder = this.encoder;\n        let firstChunk = true;\n        decoder.$reading = false;\n\n        let readFromEncoder = () => {\n            decoder.$reading = true;\n\n            let data = encoder.read();\n            if (data === null) {\n                decoder.$reading = false;\n                return;\n            }\n\n            if (firstChunk) {\n                firstChunk = false;\n                if (this.readable) {\n                    this.push(node);\n                    if (node.type === 'body') {\n                        lastByte = node.value && node.value.length && node.value[node.value.length - 1];\n                    }\n                }\n            }\n\n            let writeMore = true;\n            if (this.readable) {\n                writeMore = this.push({\n                    node,\n                    type: 'body',\n                    value: data\n                });\n                lastByte = data && data.length && data[data.length - 1];\n            }\n\n            if (writeMore) {\n                return setImmediate(readFromEncoder);\n            } else {\n                encoder.pause();\n                // no idea how to catch drain? use timeout for now as poor man's substitute\n                // this.once('drain', () => encoder.resume());\n                setTimeout(() => {\n                    encoder.resume();\n                    setImmediate(readFromEncoder);\n                }, 100);\n            }\n        };\n\n        encoder.on('readable', () => {\n            if (!decoder.$reading) {\n                return readFromEncoder();\n            }\n        });\n\n        encoder.on('end', () => {\n            if (firstChunk) {\n                firstChunk = false;\n                if (this.readable) {\n                    this.push(node);\n                    if (node.type === 'body') {\n                        lastByte = node.value && node.value.length && node.value[node.value.length - 1];\n                    }\n                }\n            }\n\n            if (lastByte !== 0x0a) {\n                // make sure there is a terminating line break\n                this.push({\n                    node,\n                    type: 'body',\n                    value: Buffer.from([0x0a])\n                });\n            }\n\n            if (this.continue) {\n                return this.continue();\n            }\n        });\n\n        if (/^text\\//.test(node.contentType) && node.flowed) {\n            // text/plain; format=flowed is a special case\n            let flowDecoder = decoder;\n            decoder = new FlowedDecoder({\n                delSp: node.delSp,\n                encoding: node.encoding\n            });\n            flowDecoder.on('error', err => {\n                decoder.emit('error', err);\n            });\n            flowDecoder.pipe(decoder);\n\n            // we don't know what kind of data we are going to get, does it comply with the\n            // requirements of format=flowed, so we just cancel it\n            node.flowed = false;\n            node.delSp = false;\n            node.setContentType();\n        }\n\n        return {\n            node,\n            decoder,\n            encoder\n        };\n    }\n}\n\nmodule.exports = NodeRewriter;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/mailsplit/lib/node-rewriter.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}}],"sources":{"../node_modules/mailsplit/lib/node-rewriter.js":"'use strict';\n\n// Helper class to rewrite nodes with specific mime type\n\nconst Transform = require('stream').Transform;\nconst FlowedDecoder = require('./flowed-decoder');\n\n/**\n * NodeRewriter Transform stream. Updates content for all nodes with specified mime type\n *\n * @constructor\n * @param {String} mimeType Define the Mime-Type to look for\n * @param {Function} rewriteAction Function to run with the node content\n */\nclass NodeRewriter extends Transform {\n    constructor(filterFunc, rewriteAction) {\n        let options = {\n            readableObjectMode: true,\n            writableObjectMode: true\n        };\n        super(options);\n\n        this.filterFunc = filterFunc;\n        this.rewriteAction = rewriteAction;\n\n        this.decoder = false;\n        this.encoder = false;\n        this.continue = false;\n    }\n\n    _transform(data, encoding, callback) {\n        this.processIncoming(data, callback);\n    }\n\n    _flush(callback) {\n        if (this.decoder) {\n            // emit an empty node just in case there is pending data to end\n            return this.processIncoming(\n                {\n                    type: 'none'\n                },\n                callback\n            );\n        }\n        return callback();\n    }\n\n    processIncoming(data, callback) {\n        if (this.decoder && data.type === 'body') {\n            // data to parse\n            if (!this.decoder.write(data.value)) {\n                return this.decoder.once('drain', callback);\n            } else {\n                return callback();\n            }\n        } else if (this.decoder && data.type !== 'body') {\n            // stop decoding.\n            // we can not process the current data chunk as we need to wait until\n            // the parsed data is completely processed, so we store a reference to the\n            // continue callback\n            this.continue = () => {\n                this.continue = false;\n                this.decoder = false;\n                this.encoder = false;\n                this.processIncoming(data, callback);\n            };\n            return this.decoder.end();\n        } else if (data.type === 'node' && this.filterFunc(data)) {\n            // found matching node, create new handler\n            this.emit('node', this.createDecodePair(data));\n        } else if (this.readable && data.type !== 'none') {\n            // we don't care about this data, just pass it over to the joiner\n            this.push(data);\n        }\n        callback();\n    }\n\n    createDecodePair(node) {\n        this.decoder = node.getDecoder();\n\n        if (['base64', 'quoted-printable'].includes(node.encoding)) {\n            this.encoder = node.getEncoder();\n        } else {\n            this.encoder = node.getEncoder('quoted-printable');\n        }\n\n        let lastByte = false;\n\n        let decoder = this.decoder;\n        let encoder = this.encoder;\n        let firstChunk = true;\n        decoder.$reading = false;\n\n        let readFromEncoder = () => {\n            decoder.$reading = true;\n\n            let data = encoder.read();\n            if (data === null) {\n                decoder.$reading = false;\n                return;\n            }\n\n            if (firstChunk) {\n                firstChunk = false;\n                if (this.readable) {\n                    this.push(node);\n                    if (node.type === 'body') {\n                        lastByte = node.value && node.value.length && node.value[node.value.length - 1];\n                    }\n                }\n            }\n\n            let writeMore = true;\n            if (this.readable) {\n                writeMore = this.push({\n                    node,\n                    type: 'body',\n                    value: data\n                });\n                lastByte = data && data.length && data[data.length - 1];\n            }\n\n            if (writeMore) {\n                return setImmediate(readFromEncoder);\n            } else {\n                encoder.pause();\n                // no idea how to catch drain? use timeout for now as poor man's substitute\n                // this.once('drain', () => encoder.resume());\n                setTimeout(() => {\n                    encoder.resume();\n                    setImmediate(readFromEncoder);\n                }, 100);\n            }\n        };\n\n        encoder.on('readable', () => {\n            if (!decoder.$reading) {\n                return readFromEncoder();\n            }\n        });\n\n        encoder.on('end', () => {\n            if (firstChunk) {\n                firstChunk = false;\n                if (this.readable) {\n                    this.push(node);\n                    if (node.type === 'body') {\n                        lastByte = node.value && node.value.length && node.value[node.value.length - 1];\n                    }\n                }\n            }\n\n            if (lastByte !== 0x0a) {\n                // make sure there is a terminating line break\n                this.push({\n                    node,\n                    type: 'body',\n                    value: Buffer.from([0x0a])\n                });\n            }\n\n            if (this.continue) {\n                return this.continue();\n            }\n        });\n\n        if (/^text\\//.test(node.contentType) && node.flowed) {\n            // text/plain; format=flowed is a special case\n            let flowDecoder = decoder;\n            decoder = new FlowedDecoder({\n                delSp: node.delSp,\n                encoding: node.encoding\n            });\n            flowDecoder.on('error', err => {\n                decoder.emit('error', err);\n            });\n            flowDecoder.pipe(decoder);\n\n            // we don't know what kind of data we are going to get, does it comply with the\n            // requirements of format=flowed, so we just cancel it\n            node.flowed = false;\n            node.delSp = false;\n            node.setContentType();\n        }\n\n        return {\n            node,\n            decoder,\n            encoder\n        };\n    }\n}\n\nmodule.exports = NodeRewriter;\n"},"lineCount":196}},"error":null,"hash":"7df6616fc6ee499fb1baa54c71dfb166","cacheData":{"env":{}}}