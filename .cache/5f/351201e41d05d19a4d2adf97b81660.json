{"id":"../node_modules/mailsplit/lib/flowed-decoder.js","dependencies":[{"name":"/var/www/html/StMichel/package.json","includedInParent":true,"mtime":1602507593919},{"name":"/var/www/html/StMichel/node_modules/mailsplit/package.json","includedInParent":true,"mtime":1602507588612},{"name":"stream","loc":{"line":5,"column":26},"parent":"/var/www/html/StMichel/node_modules/mailsplit/lib/flowed-decoder.js","resolved":"/home/etudiant/.npm-packages/lib/node_modules/parcel-bundler/node_modules/stream-browserify/index.js"},{"name":"libmime","loc":{"line":6,"column":24},"parent":"/var/www/html/StMichel/node_modules/mailsplit/lib/flowed-decoder.js","resolved":"/var/www/html/StMichel/node_modules/mailsplit/node_modules/libmime/lib/libmime.js"},{"name":"buffer","parent":"/var/www/html/StMichel/node_modules/mailsplit/lib/flowed-decoder.js","resolved":"/home/etudiant/.npm-packages/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\n// Helper class to rewrite nodes with specific mime type\n\nconst Transform = require('stream').Transform;\nconst libmime = require('libmime');\n\n/**\n * Really bad \"stream\" transform to parse format=flowed content\n *\n * @constructor\n * @param {String} delSp True if delsp option was used\n */\nclass FlowedDecoder extends Transform {\n    constructor(config) {\n        super();\n        this.config = config || {};\n\n        this.chunks = [];\n        this.chunklen = 0;\n\n        this.libmime = new libmime.Libmime({ Iconv: config.Iconv });\n    }\n\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n\n        if (!encoding !== 'buffer') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        this.chunks.push(chunk);\n        this.chunklen += chunk.length;\n\n        callback();\n    }\n\n    _flush(callback) {\n        if (this.chunklen) {\n            let currentBody = Buffer.concat(this.chunks, this.chunklen);\n\n            if (this.config.encoding === 'base64') {\n                currentBody = Buffer.from(currentBody.toString('binary'), 'base64');\n            }\n\n            let content = this.libmime.decodeFlowed(currentBody.toString('binary'), this.config.delSp);\n            this.push(Buffer.from(content, 'binary'));\n        }\n        return callback();\n    }\n}\n\nmodule.exports = FlowedDecoder;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mailsplit/lib/flowed-decoder.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}}],"sources":{"../node_modules/mailsplit/lib/flowed-decoder.js":"'use strict';\n\n// Helper class to rewrite nodes with specific mime type\n\nconst Transform = require('stream').Transform;\nconst libmime = require('libmime');\n\n/**\n * Really bad \"stream\" transform to parse format=flowed content\n *\n * @constructor\n * @param {String} delSp True if delsp option was used\n */\nclass FlowedDecoder extends Transform {\n    constructor(config) {\n        super();\n        this.config = config || {};\n\n        this.chunks = [];\n        this.chunklen = 0;\n\n        this.libmime = new libmime.Libmime({ Iconv: config.Iconv });\n    }\n\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n\n        if (!encoding !== 'buffer') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        this.chunks.push(chunk);\n        this.chunklen += chunk.length;\n\n        callback();\n    }\n\n    _flush(callback) {\n        if (this.chunklen) {\n            let currentBody = Buffer.concat(this.chunks, this.chunklen);\n\n            if (this.config.encoding === 'base64') {\n                currentBody = Buffer.from(currentBody.toString('binary'), 'base64');\n            }\n\n            let content = this.libmime.decodeFlowed(currentBody.toString('binary'), this.config.delSp);\n            this.push(Buffer.from(content, 'binary'));\n        }\n        return callback();\n    }\n}\n\nmodule.exports = FlowedDecoder;\n"},"lineCount":57}},"error":null,"hash":"ed7739b134d096253b9e72ebb0adda88","cacheData":{"env":{}}}