{"id":"../node_modules/libbase64/lib/libbase64.js","dependencies":[{"name":"/var/www/html/StMichel/package.json","includedInParent":true,"mtime":1602507593919},{"name":"/var/www/html/StMichel/node_modules/libbase64/package.json","includedInParent":true,"mtime":1602507588612},{"name":"stream","loc":{"line":3,"column":23},"parent":"/var/www/html/StMichel/node_modules/libbase64/lib/libbase64.js","resolved":"/home/etudiant/.npm-packages/lib/node_modules/parcel-bundler/node_modules/stream-browserify/index.js"},{"name":"buffer","parent":"/var/www/html/StMichel/node_modules/libbase64/lib/libbase64.js","resolved":"/home/etudiant/.npm-packages/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nconst stream = require('stream');\nconst Transform = stream.Transform;\n\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */\nfunction encode(buffer) {\n    if (typeof buffer === 'string') {\n        buffer = Buffer.from(buffer, 'utf-8');\n    }\n\n    return buffer.toString('base64');\n}\n\n/**\n * Decodes a base64 encoded string to a Buffer object\n *\n * @param {String} str base64 encoded string\n * @returns {Buffer} Decoded value\n */\nfunction decode(str) {\n    str = str || '';\n    return Buffer.from(str, 'base64');\n}\n\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */\nfunction wrap(str, lineLength) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n\n    if (str.length <= lineLength) {\n        return str;\n    }\n\n    let result = [];\n    let pos = 0;\n    let chunkLength = lineLength * 1024;\n    while (pos < str.length) {\n        let wrappedLines = str\n            .substr(pos, chunkLength)\n            .replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\\r\\n')\n            .trim();\n        result.push(wrappedLines);\n        pos += chunkLength;\n    }\n\n    return result.join('\\r\\n').trim();\n}\n\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum lenght for lines, set to false to disable wrapping\n */\nclass Encoder extends Transform {\n    constructor(options) {\n        super();\n        // init Transform\n        this.options = options || {};\n\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = Number(this.options.lineLength) || 76;\n        }\n\n        this.skipStartBytes = Number(this.options.skipStartBytes) || 0;\n        this.limitOutbutBytes = Number(this.options.limitOutbutBytes) || 0;\n\n        // startPadding can be used together with skipStartBytes\n        this._curLine = this.options.startPadding || '';\n        this._remainingBytes = false;\n\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n\n    _writeChunk(chunk /*, isFinal */) {\n        if (this.skipStartBytes) {\n            if (chunk.length <= this.skipStartBytes) {\n                this.skipStartBytes -= chunk.length;\n                return;\n            }\n\n            chunk = chunk.slice(this.skipStartBytes);\n            this.skipStartBytes = 0;\n        }\n\n        if (this.limitOutbutBytes) {\n            if (this.outputBytes + chunk.length <= this.limitOutbutBytes) {\n                // ignore, can use entire chunk\n            } else if (this.outputBytes >= this.limitOutbutBytes) {\n                // chunks already processed\n                return;\n            } else {\n                // use partial chunk\n                chunk = chunk.slice(0, this.limitOutbutBytes - this.outputBytes);\n            }\n        }\n\n        this.outputBytes += chunk.length;\n        this.push(chunk);\n    }\n\n    _getWrapped(str, isFinal) {\n        str = wrap(str, this.options.lineLength);\n        if (!isFinal && str.length === this.options.lineLength) {\n            str += '\\r\\n';\n        }\n        return str;\n    }\n\n    _transform(chunk, encoding, done) {\n        if (encoding !== 'buffer') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        if (!chunk || !chunk.length) {\n            return setImmediate(done);\n        }\n\n        this.inputBytes += chunk.length;\n\n        if (this._remainingBytes && this._remainingBytes.length) {\n            chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);\n            this._remainingBytes = false;\n        }\n\n        if (chunk.length % 3) {\n            this._remainingBytes = chunk.slice(chunk.length - (chunk.length % 3));\n            chunk = chunk.slice(0, chunk.length - (chunk.length % 3));\n        } else {\n            this._remainingBytes = false;\n        }\n\n        let b64 = this._curLine + encode(chunk);\n\n        if (this.options.lineLength) {\n            b64 = this._getWrapped(b64);\n\n            // remove last line as it is still most probably incomplete\n            let lastLF = b64.lastIndexOf('\\n');\n            if (lastLF < 0) {\n                this._curLine = b64;\n                b64 = '';\n            } else if (lastLF === b64.length - 1) {\n                this._curLine = '';\n            } else {\n                this._curLine = b64.substr(lastLF + 1);\n                b64 = b64.substr(0, lastLF + 1);\n            }\n        }\n\n        if (b64) {\n            this._writeChunk(Buffer.from(b64, 'ascii'), false);\n        }\n\n        setImmediate(done);\n    }\n\n    _flush(done) {\n        if (this._remainingBytes && this._remainingBytes.length) {\n            this._curLine += encode(this._remainingBytes);\n        }\n\n        if (this._curLine) {\n            this._curLine = this._getWrapped(this._curLine, true);\n            this._writeChunk(Buffer.from(this._curLine, 'ascii'), true);\n            this._curLine = '';\n        }\n        done();\n    }\n}\n\n/**\n * Creates a transform stream for decoding base64 encoded strings\n *\n * @constructor\n * @param {Object} options Stream options\n */\nclass Decoder extends Transform {\n    constructor(options) {\n        super();\n        // init Transform\n        this.options = options || {};\n        this._curLine = '';\n\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n\n    _transform(chunk, encoding, done) {\n        if (!chunk || !chunk.length) {\n            return setImmediate(done);\n        }\n\n        this.inputBytes += chunk.length;\n\n        let b64 = this._curLine + chunk.toString('ascii');\n        this._curLine = '';\n\n        if (/[^a-zA-Z0-9+/=]/.test(b64)) {\n            b64 = b64.replace(/[^a-zA-Z0-9+/=]/g, '');\n        }\n\n        if (b64.length < 4) {\n            this._curLine = b64;\n            b64 = '';\n        } else if (b64.length % 4) {\n            this._curLine = b64.substr(-b64.length % 4);\n            b64 = b64.substr(0, b64.length - this._curLine.length);\n        }\n\n        if (b64) {\n            let buf = decode(b64);\n            this.outputBytes += buf.length;\n            this.push(buf);\n        }\n\n        setImmediate(done);\n    }\n\n    _flush(done) {\n        if (this._curLine) {\n            let buf = decode(this._curLine);\n            this.outputBytes += buf.length;\n            this.push(buf);\n            this._curLine = '';\n        }\n        setImmediate(done);\n    }\n}\n\n// expose to the world\nmodule.exports = {\n    encode,\n    decode,\n    wrap,\n    Encoder,\n    Decoder\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/libbase64/lib/libbase64.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}}],"sources":{"../node_modules/libbase64/lib/libbase64.js":"'use strict';\n\nconst stream = require('stream');\nconst Transform = stream.Transform;\n\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */\nfunction encode(buffer) {\n    if (typeof buffer === 'string') {\n        buffer = Buffer.from(buffer, 'utf-8');\n    }\n\n    return buffer.toString('base64');\n}\n\n/**\n * Decodes a base64 encoded string to a Buffer object\n *\n * @param {String} str base64 encoded string\n * @returns {Buffer} Decoded value\n */\nfunction decode(str) {\n    str = str || '';\n    return Buffer.from(str, 'base64');\n}\n\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */\nfunction wrap(str, lineLength) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n\n    if (str.length <= lineLength) {\n        return str;\n    }\n\n    let result = [];\n    let pos = 0;\n    let chunkLength = lineLength * 1024;\n    while (pos < str.length) {\n        let wrappedLines = str\n            .substr(pos, chunkLength)\n            .replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\\r\\n')\n            .trim();\n        result.push(wrappedLines);\n        pos += chunkLength;\n    }\n\n    return result.join('\\r\\n').trim();\n}\n\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum lenght for lines, set to false to disable wrapping\n */\nclass Encoder extends Transform {\n    constructor(options) {\n        super();\n        // init Transform\n        this.options = options || {};\n\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = Number(this.options.lineLength) || 76;\n        }\n\n        this.skipStartBytes = Number(this.options.skipStartBytes) || 0;\n        this.limitOutbutBytes = Number(this.options.limitOutbutBytes) || 0;\n\n        // startPadding can be used together with skipStartBytes\n        this._curLine = this.options.startPadding || '';\n        this._remainingBytes = false;\n\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n\n    _writeChunk(chunk /*, isFinal */) {\n        if (this.skipStartBytes) {\n            if (chunk.length <= this.skipStartBytes) {\n                this.skipStartBytes -= chunk.length;\n                return;\n            }\n\n            chunk = chunk.slice(this.skipStartBytes);\n            this.skipStartBytes = 0;\n        }\n\n        if (this.limitOutbutBytes) {\n            if (this.outputBytes + chunk.length <= this.limitOutbutBytes) {\n                // ignore, can use entire chunk\n            } else if (this.outputBytes >= this.limitOutbutBytes) {\n                // chunks already processed\n                return;\n            } else {\n                // use partial chunk\n                chunk = chunk.slice(0, this.limitOutbutBytes - this.outputBytes);\n            }\n        }\n\n        this.outputBytes += chunk.length;\n        this.push(chunk);\n    }\n\n    _getWrapped(str, isFinal) {\n        str = wrap(str, this.options.lineLength);\n        if (!isFinal && str.length === this.options.lineLength) {\n            str += '\\r\\n';\n        }\n        return str;\n    }\n\n    _transform(chunk, encoding, done) {\n        if (encoding !== 'buffer') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        if (!chunk || !chunk.length) {\n            return setImmediate(done);\n        }\n\n        this.inputBytes += chunk.length;\n\n        if (this._remainingBytes && this._remainingBytes.length) {\n            chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);\n            this._remainingBytes = false;\n        }\n\n        if (chunk.length % 3) {\n            this._remainingBytes = chunk.slice(chunk.length - (chunk.length % 3));\n            chunk = chunk.slice(0, chunk.length - (chunk.length % 3));\n        } else {\n            this._remainingBytes = false;\n        }\n\n        let b64 = this._curLine + encode(chunk);\n\n        if (this.options.lineLength) {\n            b64 = this._getWrapped(b64);\n\n            // remove last line as it is still most probably incomplete\n            let lastLF = b64.lastIndexOf('\\n');\n            if (lastLF < 0) {\n                this._curLine = b64;\n                b64 = '';\n            } else if (lastLF === b64.length - 1) {\n                this._curLine = '';\n            } else {\n                this._curLine = b64.substr(lastLF + 1);\n                b64 = b64.substr(0, lastLF + 1);\n            }\n        }\n\n        if (b64) {\n            this._writeChunk(Buffer.from(b64, 'ascii'), false);\n        }\n\n        setImmediate(done);\n    }\n\n    _flush(done) {\n        if (this._remainingBytes && this._remainingBytes.length) {\n            this._curLine += encode(this._remainingBytes);\n        }\n\n        if (this._curLine) {\n            this._curLine = this._getWrapped(this._curLine, true);\n            this._writeChunk(Buffer.from(this._curLine, 'ascii'), true);\n            this._curLine = '';\n        }\n        done();\n    }\n}\n\n/**\n * Creates a transform stream for decoding base64 encoded strings\n *\n * @constructor\n * @param {Object} options Stream options\n */\nclass Decoder extends Transform {\n    constructor(options) {\n        super();\n        // init Transform\n        this.options = options || {};\n        this._curLine = '';\n\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n\n    _transform(chunk, encoding, done) {\n        if (!chunk || !chunk.length) {\n            return setImmediate(done);\n        }\n\n        this.inputBytes += chunk.length;\n\n        let b64 = this._curLine + chunk.toString('ascii');\n        this._curLine = '';\n\n        if (/[^a-zA-Z0-9+/=]/.test(b64)) {\n            b64 = b64.replace(/[^a-zA-Z0-9+/=]/g, '');\n        }\n\n        if (b64.length < 4) {\n            this._curLine = b64;\n            b64 = '';\n        } else if (b64.length % 4) {\n            this._curLine = b64.substr(-b64.length % 4);\n            b64 = b64.substr(0, b64.length - this._curLine.length);\n        }\n\n        if (b64) {\n            let buf = decode(b64);\n            this.outputBytes += buf.length;\n            this.push(buf);\n        }\n\n        setImmediate(done);\n    }\n\n    _flush(done) {\n        if (this._curLine) {\n            let buf = decode(this._curLine);\n            this.outputBytes += buf.length;\n            this.push(buf);\n            this._curLine = '';\n        }\n        setImmediate(done);\n    }\n}\n\n// expose to the world\nmodule.exports = {\n    encode,\n    decode,\n    wrap,\n    Encoder,\n    Decoder\n};\n"},"lineCount":254}},"error":null,"hash":"ade88f981c82a8559070b57e8cd89378","cacheData":{"env":{}}}