{"id":"../node_modules/libmime/lib/libmime.js","dependencies":[{"name":"/var/www/html/StMichel/package.json","includedInParent":true,"mtime":1602507593919},{"name":"/var/www/html/StMichel/node_modules/libmime/package.json","includedInParent":true,"mtime":1602507588612},{"name":"./charset","loc":{"line":4,"column":27},"parent":"/var/www/html/StMichel/node_modules/libmime/lib/libmime.js","resolved":"/var/www/html/StMichel/node_modules/libmime/lib/charset.js"},{"name":"libbase64","loc":{"line":5,"column":26},"parent":"/var/www/html/StMichel/node_modules/libmime/lib/libmime.js","resolved":"/var/www/html/StMichel/node_modules/libbase64/lib/libbase64.js"},{"name":"libqp","loc":{"line":6,"column":22},"parent":"/var/www/html/StMichel/node_modules/libmime/lib/libmime.js","resolved":"/var/www/html/StMichel/node_modules/libqp/lib/libqp.js"},{"name":"./mimetypes","loc":{"line":7,"column":26},"parent":"/var/www/html/StMichel/node_modules/libmime/lib/libmime.js","resolved":"/var/www/html/StMichel/node_modules/libmime/lib/mimetypes.js"},{"name":"buffer","parent":"/var/www/html/StMichel/node_modules/libmime/lib/libmime.js","resolved":"/home/etudiant/.npm-packages/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n/* eslint no-control-regex: 0, no-div-regex: 0, quotes: 0 */\n'use strict';\n\nconst libcharset = require('./charset');\nconst libbase64 = require('libbase64');\nconst libqp = require('libqp');\nconst mimetypes = require('./mimetypes');\n\nconst STAGE_KEY = 0x1001;\nconst STAGE_VALUE = 0x1002;\n\nclass Libmime {\n    constructor(config) {\n        this.config = config || {};\n    }\n\n    /**\n     * Checks if a value is plaintext string (uses only printable 7bit chars)\n     *\n     * @param {String} value String to be tested\n     * @returns {Boolean} true if it is a plaintext string\n     */\n    isPlainText(value) {\n        if (typeof value !== 'string' || /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\u0080-\\uFFFF]/.test(value)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Checks if a multi line string containes lines longer than the selected value.\n     *\n     * Useful when detecting if a mail message needs any processing at all â€“\n     * if only plaintext characters are used and lines are short, then there is\n     * no need to encode the values in any way. If the value is plaintext but has\n     * longer lines then allowed, then use format=flowed\n     *\n     * @param {Number} lineLength Max line length to check for\n     * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars\n     */\n    hasLongerLines(str, lineLength) {\n        return new RegExp('^.{' + (lineLength + 1) + ',}', 'm').test(str);\n    }\n\n    /**\n     * Decodes a string from a format=flowed soft wrapping.\n     *\n     * @param {String} str Plaintext string with format=flowed to decode\n     * @param {Boolean} [delSp] If true, delete leading spaces (delsp=yes)\n     * @return {String} Mime decoded string\n     */\n    decodeFlowed(str, delSp) {\n        str = (str || '').toString();\n\n        return (\n            str\n                .split(/\\r?\\n/)\n                // remove soft linebreaks\n                // soft linebreaks are added after space symbols\n                .reduce((previousValue, currentValue) => {\n                    if (/ $/.test(previousValue) && !/(^|\\n)-- $/.test(previousValue)) {\n                        if (delSp) {\n                            // delsp adds space to text to be able to fold it\n                            // these spaces can be removed once the text is unfolded\n                            return previousValue.slice(0, -1) + currentValue;\n                        } else {\n                            return previousValue + currentValue;\n                        }\n                    } else {\n                        return previousValue + '\\n' + currentValue;\n                    }\n                })\n                // remove whitespace stuffing\n                // http://tools.ietf.org/html/rfc3676#section-4.4\n                .replace(/^ /gm, '')\n        );\n    }\n\n    /**\n     * Adds soft line breaks to content marked with format=flowed to\n     * ensure that no line in the message is never longer than lineLength\n     *\n     * @param {String} str Plaintext string that requires wrapping\n     * @param {Number} [lineLength=76] Maximum length of a line\n     * @return {String} String with forced line breaks\n     */\n    encodeFlowed(str, lineLength) {\n        lineLength = lineLength || 76;\n\n        let flowed = [];\n        str.split(/\\r?\\n/).forEach(line => {\n            flowed.push(\n                this.foldLines(\n                    line\n                        // space stuffing http://tools.ietf.org/html/rfc3676#section-4.2\n                        .replace(/^( |From|>)/gim, ' $1'),\n                    lineLength,\n                    true\n                )\n            );\n        });\n        return flowed.join('\\r\\n');\n    }\n\n    /**\n     * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @return {String} Single or several mime words joined together\n     */\n    encodeWord(data, mimeWordEncoding, maxLength) {\n        mimeWordEncoding = (mimeWordEncoding || 'Q').toString().toUpperCase().trim().charAt(0);\n        maxLength = maxLength || 0;\n\n        let encodedStr;\n        let toCharset = 'UTF-8';\n\n        if (maxLength && maxLength > 7 + toCharset.length) {\n            maxLength -= 7 + toCharset.length;\n        }\n\n        if (mimeWordEncoding === 'Q') {\n            // https://tools.ietf.org/html/rfc2047#section-5 rule (3)\n            encodedStr = libqp.encode(data).replace(/[^a-z0-9!*+\\-/=]/gi, chr => {\n                let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n                if (chr === ' ') {\n                    return '_';\n                } else {\n                    return '=' + (ord.length === 1 ? '0' + ord : ord);\n                }\n            });\n        } else if (mimeWordEncoding === 'B') {\n            encodedStr = typeof data === 'string' ? data : libbase64.encode(data);\n            maxLength = maxLength ? Math.max(3, ((maxLength - (maxLength % 4)) / 4) * 3) : 0;\n        }\n\n        if (maxLength && (mimeWordEncoding !== 'B' ? encodedStr : libbase64.encode(data)).length > maxLength) {\n            if (mimeWordEncoding === 'Q') {\n                encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n            } else {\n                // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences\n                let parts = [];\n                let lpart = '';\n                for (let i = 0, len = encodedStr.length; i < len; i++) {\n                    let chr = encodedStr.charAt(i);\n                    // check if we can add this character to the existing string\n                    // without breaking byte length limit\n                    if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {\n                        lpart += chr;\n                    } else {\n                        // we hit the length limit, so push the existing string and start over\n                        parts.push(libbase64.encode(lpart));\n                        lpart = chr;\n                    }\n                }\n                if (lpart) {\n                    parts.push(libbase64.encode(lpart));\n                }\n\n                if (parts.length > 1) {\n                    encodedStr = parts.join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n                } else {\n                    encodedStr = parts.join('');\n                }\n            }\n        } else if (mimeWordEncoding === 'B') {\n            encodedStr = libbase64.encode(data);\n        }\n\n        return '=?' + toCharset + '?' + mimeWordEncoding + '?' + encodedStr + (encodedStr.substr(-2) === '?=' ? '' : '?=');\n    }\n\n    /**\n     * Decode a complete mime word encoded string\n     *\n     * @param {String} str Mime word encoded string\n     * @return {String} Decoded unicode string\n     */\n    decodeWord(charset, encoding, str) {\n        // RFC2231 added language tag to the encoding\n        // see: https://tools.ietf.org/html/rfc2231#section-5\n        // this implementation silently ignores this tag\n        let splitPos = charset.indexOf('*');\n        if (splitPos >= 0) {\n            charset = charset.substr(0, splitPos);\n        }\n        charset = libcharset.normalizeCharset(charset);\n\n        encoding = encoding.toUpperCase();\n\n        if (encoding === 'Q') {\n            str = str\n                // remove spaces between = and hex char, this might indicate invalidly applied line splitting\n                .replace(/=\\s+([0-9a-fA-F])/g, '=$1')\n                // convert all underscores to spaces\n                .replace(/[_\\s]/g, ' ');\n\n            let buf = Buffer.from(str);\n            let bytes = [];\n            for (let i = 0, len = buf.length; i < len; i++) {\n                let c = buf[i];\n                if (i <= len - 2 && c === 0x3d /* = */) {\n                    let c1 = this.getHex(buf[i + 1]);\n                    let c2 = this.getHex(buf[i + 2]);\n                    if (c1 && c2) {\n                        let c = parseInt(c1 + c2, 16);\n                        bytes.push(c);\n                        i += 2;\n                        continue;\n                    }\n                }\n                bytes.push(c);\n            }\n            str = Buffer.from(bytes);\n        } else if (encoding === 'B') {\n            str = Buffer.concat(\n                str\n                    .split('=')\n                    .filter(s => s !== '') // filter empty string\n                    .map(str => Buffer.from(str, 'base64'))\n            );\n        } else {\n            // keep as is, convert Buffer to unicode string, assume utf8\n            str = Buffer.from(str);\n        }\n\n        return libcharset.decode(str, charset);\n    }\n\n    /**\n     * Finds word sequences with non ascii text and converts these to mime words\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @param {String} [fromCharset='UTF-8'] Source sharacter set\n     * @return {String} String with possible mime words\n     */\n    encodeWords(data, mimeWordEncoding, maxLength, fromCharset) {\n        if (!fromCharset && typeof maxLength === 'string' && !maxLength.match(/^[0-9]+$/)) {\n            fromCharset = maxLength;\n            maxLength = undefined;\n        }\n\n        maxLength = maxLength || 0;\n\n        let decodedValue = libcharset.decode(libcharset.convert(data || '', fromCharset));\n        let encodedValue;\n\n        let firstMatch = decodedValue.match(/(?:^|\\s)([^\\s]*[\\u0080-\\uFFFF])/);\n        if (!firstMatch) {\n            return decodedValue;\n        }\n        let lastMatch = decodedValue.match(/([\\u0080-\\uFFFF][^\\s]*)[^\\u0080-\\uFFFF]*$/);\n        if (!lastMatch) {\n            // should not happen\n            return decodedValue;\n        }\n        let startIndex =\n            firstMatch.index +\n            (\n                firstMatch[0].match(/[^\\s]/) || {\n                    index: 0\n                }\n            ).index;\n        let endIndex = lastMatch.index + (lastMatch[1] || '').length;\n\n        encodedValue =\n            (startIndex ? decodedValue.substr(0, startIndex) : '') +\n            this.encodeWord(decodedValue.substring(startIndex, endIndex), mimeWordEncoding || 'Q', maxLength) +\n            (endIndex < decodedValue.length ? decodedValue.substr(endIndex) : '');\n\n        return encodedValue;\n    }\n\n    /**\n     * Decode a string that might include one or several mime words\n     *\n     * @param {String} str String including some mime words that will be encoded\n     * @return {String} Decoded unicode string\n     */\n    decodeWords(str) {\n        return (\n            (str || '')\n                .toString()\n                // find base64 words that can be joined\n                .replace(/(=\\?([^?]+)\\?[Bb]\\?[^?]*\\?=)\\s*(?==\\?([^?]+)\\?[Bb]\\?[^?]*\\?=)/g, (match, left, chLeft, chRight) => {\n                    // only mark b64 chunks to be joined if charsets match\n                    if (libcharset.normalizeCharset(chLeft || '') === libcharset.normalizeCharset(chRight || '')) {\n                        // set a joiner marker\n                        return left + '__\\x00JOIN\\x00__';\n                    }\n                    return match;\n                })\n                // find QP words that can be joined\n                .replace(/(=\\?([^?]+)\\?[Qq]\\?[^?]*\\?=)\\s*(?==\\?([^?]+)\\?[Qq]\\?[^?]*\\?=)/g, (match, left, chLeft, chRight) => {\n                    // only mark QP chunks to be joined if charsets match\n                    if (libcharset.normalizeCharset(chLeft || '') === libcharset.normalizeCharset(chRight || '')) {\n                        // set a joiner marker\n                        return left + '__\\x00JOIN\\x00__';\n                    }\n                    return match;\n                })\n                // join base64 encoded words\n                .replace(/(\\?=)?__\\x00JOIN\\x00__(=\\?([^?]+)\\?[QqBb]\\?)?/g, '')\n                // remove spaces between mime encoded words\n                .replace(/(=\\?[^?]+\\?[QqBb]\\?[^?]*\\?=)\\s+(?==\\?[^?]+\\?[QqBb]\\?[^?]*\\?=)/g, '$1')\n                // decode words\n                .replace(/=\\?([\\w_\\-*]+)\\?([QqBb])\\?([^?]*)\\?=/g, (m, charset, encoding, text) => this.decodeWord(charset, encoding, text))\n        );\n    }\n\n    getHex(c) {\n        if ((c >= 0x30 /* 0 */ && c <= 0x39) /* 9 */ || (c >= 0x61 /* a */ && c <= 0x66) /* f */ || (c >= 0x41 /* A */ && c <= 0x46) /* F */) {\n            return String.fromCharCode(c);\n        }\n        return false;\n    }\n\n    /**\n     * Splits a string by :\n     * The result is not mime word decoded, you need to do your own decoding based\n     * on the rules for the specific header key\n     *\n     * @param {String} headerLine Single header line, might include linebreaks as well if folded\n     * @return {Object} And object of {key, value}\n     */\n    decodeHeader(headerLine) {\n        let line = (headerLine || '')\n                .toString()\n                .replace(/(?:\\r?\\n|\\r)[ \\t]*/g, ' ')\n                .trim(),\n            match = line.match(/^\\s*([^:]+):(.*)$/),\n            key = ((match && match[1]) || '').trim().toLowerCase(),\n            value = ((match && match[2]) || '').trim();\n\n        return {\n            key,\n            value\n        };\n    }\n\n    /**\n     * Parses a block of header lines. Does not decode mime words as every\n     * header might have its own rules (eg. formatted email addresses and such)\n     *\n     * @param {String} headers Headers string\n     * @return {Object} An object of headers, where header keys are object keys. NB! Several values with the same key make up an Array\n     */\n    decodeHeaders(headers) {\n        let lines = headers.split(/\\r?\\n|\\r/),\n            headersObj = {},\n            header,\n            i,\n            len;\n\n        for (i = lines.length - 1; i >= 0; i--) {\n            if (i && lines[i].match(/^\\s/)) {\n                lines[i - 1] += '\\r\\n' + lines[i];\n                lines.splice(i, 1);\n            }\n        }\n\n        for (i = 0, len = lines.length; i < len; i++) {\n            header = this.decodeHeader(lines[i]);\n            if (!headersObj[header.key]) {\n                headersObj[header.key] = [header.value];\n            } else {\n                headersObj[header.key].push(header.value);\n            }\n        }\n\n        return headersObj;\n    }\n\n    /**\n     * Joins parsed header value together as 'value; param1=value1; param2=value2'\n     * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.\n     *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n     * @param {Object} structured Parsed header value\n     * @return {String} joined header value\n     */\n    buildHeaderValue(structured) {\n        let paramsArray = [];\n\n        Object.keys(structured.params || {}).forEach(param => {\n            // filename might include unicode characters so it is a special case\n            let value = structured.params[param];\n            if (!this.isPlainText(value) || value.length >= 75) {\n                this.buildHeaderParam(param, value, 50).forEach(encodedParam => {\n                    if (!/[\\s\"\\\\;:/=(),<>@[\\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === '*') {\n                        paramsArray.push(encodedParam.key + '=' + encodedParam.value);\n                    } else {\n                        paramsArray.push(encodedParam.key + '=' + JSON.stringify(encodedParam.value));\n                    }\n                });\n            } else if (/[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(value)) {\n                paramsArray.push(param + '=' + JSON.stringify(value));\n            } else {\n                paramsArray.push(param + '=' + value);\n            }\n        });\n\n        return structured.value + (paramsArray.length ? '; ' + paramsArray.join('; ') : '');\n    }\n\n    /**\n     * Parses a header value with key=value arguments into a structured\n     * object.\n     *\n     *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->\n     *   {\n     *     'value': 'text/plain',\n     *     'params': {\n     *       'charset': 'UTF-8'\n     *     }\n     *   }\n     *\n     * @param {String} str Header value\n     * @return {Object} Header value as a parsed structure\n     */\n    parseHeaderValue(str) {\n        let response = {\n            value: false,\n            params: {}\n        };\n        let key = false;\n        let value = '';\n        let stage = STAGE_VALUE;\n\n        let quote = false;\n        let escaped = false;\n        let chr;\n\n        for (let i = 0, len = str.length; i < len; i++) {\n            chr = str.charAt(i);\n            switch (stage) {\n                case STAGE_KEY:\n                    if (chr === '=') {\n                        key = value.trim().toLowerCase();\n                        stage = STAGE_VALUE;\n                        value = '';\n                        break;\n                    }\n                    value += chr;\n                    break;\n                case STAGE_VALUE:\n                    if (escaped) {\n                        value += chr;\n                    } else if (chr === '\\\\') {\n                        escaped = true;\n                        continue;\n                    } else if (quote && chr === quote) {\n                        quote = false;\n                    } else if (!quote && chr === '\"') {\n                        quote = chr;\n                    } else if (!quote && chr === ';') {\n                        if (key === false) {\n                            response.value = value.trim();\n                        } else {\n                            response.params[key] = value.trim();\n                        }\n                        stage = STAGE_KEY;\n                        value = '';\n                    } else {\n                        value += chr;\n                    }\n                    escaped = false;\n                    break;\n            }\n        }\n\n        // finalize remainder\n        value = value.trim();\n        if (stage === STAGE_VALUE) {\n            if (key === false) {\n                // default value\n                response.value = value;\n            } else {\n                // subkey value\n                response.params[key] = value;\n            }\n        } else if (value) {\n            // treat as key without value, see emptykey:\n            // Header-Key: somevalue; key=value; emptykey\n            response.params[value.toLowerCase()] = '';\n        }\n\n        // handle parameter value continuations\n        // https://tools.ietf.org/html/rfc2231#section-3\n\n        // preprocess values\n        Object.keys(response.params).forEach(key => {\n            let actualKey;\n            let nr;\n            let value;\n\n            let match = key.match(/\\*((\\d+)\\*?)?$/);\n\n            if (!match) {\n                // nothing to do here, does not seem like a continuation param\n                return;\n            }\n\n            actualKey = key.substr(0, match.index).toLowerCase();\n            nr = Number(match[2]) || 0;\n\n            if (!response.params[actualKey] || typeof response.params[actualKey] !== 'object') {\n                response.params[actualKey] = {\n                    charset: false,\n                    values: []\n                };\n            }\n\n            value = response.params[key];\n\n            if (nr === 0 && match[0].charAt(match[0].length - 1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\n                response.params[actualKey].charset = match[1] || 'utf-8';\n                value = match[2];\n            }\n\n            response.params[actualKey].values.push({ nr, value });\n\n            // remove the old reference\n            delete response.params[key];\n        });\n\n        // concatenate split rfc2231 strings and convert encoded strings to mime encoded words\n        Object.keys(response.params).forEach(key => {\n            let value;\n            if (response.params[key] && Array.isArray(response.params[key].values)) {\n                value = response.params[key].values\n                    .sort((a, b) => a.nr - b.nr)\n                    .map(val => (val && val.value) || '')\n                    .join('');\n\n                if (response.params[key].charset) {\n                    // convert \"%AB\" to \"=?charset?Q?=AB?=\" and then to unicode\n                    response.params[key] = this.decodeWords(\n                        '=?' +\n                            response.params[key].charset +\n                            '?Q?' +\n                            value\n                                // fix invalidly encoded chars\n                                .replace(/[=?_\\s]/g, s => {\n                                    let c = s.charCodeAt(0).toString(16);\n                                    if (s === ' ') {\n                                        return '_';\n                                    } else {\n                                        return '%' + (c.length < 2 ? '0' : '') + c;\n                                    }\n                                })\n                                // change from urlencoding to percent encoding\n                                .replace(/%/g, '=') +\n                            '?='\n                    );\n                } else {\n                    response.params[key] = this.decodeWords(value);\n                }\n            }\n        });\n\n        return response;\n    }\n\n    /**\n     * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)\n     * Useful for splitting long parameter values.\n     *\n     * For example\n     *      title=\"unicode string\"\n     * becomes\n     *     title*0*=utf-8''unicode\n     *     title*1*=%20string\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {Number} [maxLength=50] Max length for generated chunks\n     * @param {String} [fromCharset='UTF-8'] Source sharacter set\n     * @return {Array} A list of encoded keys and headers\n     */\n    buildHeaderParam(key, data, maxLength, fromCharset) {\n        let list = [];\n        let encodedStr = typeof data === 'string' ? data : this.decode(data, fromCharset);\n        let encodedStrArr;\n        let chr, ord;\n        let line;\n        let startPos = 0;\n        let isEncoded = false;\n        let i, len;\n\n        maxLength = maxLength || 50;\n\n        // process ascii only text\n        if (this.isPlainText(data)) {\n            // check if conversion is even needed\n            if (encodedStr.length <= maxLength) {\n                return [\n                    {\n                        key,\n                        value: encodedStr\n                    }\n                ];\n            }\n\n            encodedStr = encodedStr.replace(new RegExp('.{' + maxLength + '}', 'g'), str => {\n                list.push({\n                    line: str\n                });\n                return '';\n            });\n\n            if (encodedStr) {\n                list.push({\n                    line: encodedStr\n                });\n            }\n        } else {\n            if (/[\\uD800-\\uDBFF]/.test(encodedStr)) {\n                // string containts surrogate pairs, so normalize it to an array of bytes\n                encodedStrArr = [];\n                for (i = 0, len = encodedStr.length; i < len; i++) {\n                    chr = encodedStr.charAt(i);\n                    ord = chr.charCodeAt(0);\n                    if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {\n                        chr += encodedStr.charAt(i + 1);\n                        encodedStrArr.push(chr);\n                        i++;\n                    } else {\n                        encodedStrArr.push(chr);\n                    }\n                }\n                encodedStr = encodedStrArr;\n            }\n\n            // first line includes the charset and language info and needs to be encoded\n            // even if it does not contain any unicode characters\n            line = \"utf-8''\";\n            isEncoded = true;\n            startPos = 0;\n\n            // process text with unicode or special chars\n            for (i = 0, len = encodedStr.length; i < len; i++) {\n                chr = encodedStr[i];\n\n                if (isEncoded) {\n                    chr = this.safeEncodeURIComponent(chr);\n                } else {\n                    // try to urlencode current char\n                    chr = chr === ' ' ? chr : this.safeEncodeURIComponent(chr);\n                    // By default it is not required to encode a line, the need\n                    // only appears when the string contains unicode or special chars\n                    // in this case we start processing the line over and encode all chars\n                    if (chr !== encodedStr[i]) {\n                        // Check if it is even possible to add the encoded char to the line\n                        // If not, there is no reason to use this line, just push it to the list\n                        // and start a new line with the char that needs encoding\n                        if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {\n                            list.push({\n                                line,\n                                encoded: isEncoded\n                            });\n                            line = '';\n                            startPos = i - 1;\n                        } else {\n                            isEncoded = true;\n                            i = startPos;\n                            line = '';\n                            continue;\n                        }\n                    }\n                }\n\n                // if the line is already too long, push it to the list and start a new one\n                if ((line + chr).length >= maxLength) {\n                    list.push({\n                        line,\n                        encoded: isEncoded\n                    });\n                    line = chr = encodedStr[i] === ' ' ? ' ' : this.safeEncodeURIComponent(encodedStr[i]);\n                    if (chr === encodedStr[i]) {\n                        isEncoded = false;\n                        startPos = i - 1;\n                    } else {\n                        isEncoded = true;\n                    }\n                } else {\n                    line += chr;\n                }\n            }\n\n            if (line) {\n                list.push({\n                    line,\n                    encoded: isEncoded\n                });\n            }\n        }\n\n        return list.map((item, i) => ({\n            // encoded lines: {name}*{part}*\n            // unencoded lines: {name}*{part}\n            // if any line needs to be encoded then the first line (part==0) is always encoded\n            key: key + '*' + i + (item.encoded ? '*' : ''),\n            value: item.line\n        }));\n    }\n\n    /**\n     * Returns file extension for a content type string. If no suitable extensions\n     * are found, 'bin' is used as the default extension\n     *\n     * @param {String} mimeType Content type to be checked for\n     * @return {String} File extension\n     */\n    detectExtension(mimeType) {\n        mimeType = (mimeType || '').toString().toLowerCase().replace(/\\s/g, '');\n        if (!(mimeType in mimetypes.list)) {\n            return 'bin';\n        }\n\n        if (typeof mimetypes.list[mimeType] === 'string') {\n            return mimetypes.list[mimeType];\n        }\n\n        let mimeParts = mimeType.split('/');\n\n        // search for name match\n        for (let i = 0, len = mimetypes.list[mimeType].length; i < len; i++) {\n            if (mimeParts[1] === mimetypes.list[mimeType][i]) {\n                return mimetypes.list[mimeType][i];\n            }\n        }\n\n        // use the first one\n        return mimetypes.list[mimeType][0] !== '*' ? mimetypes.list[mimeType][0] : 'bin';\n    }\n\n    /**\n     * Returns content type for a file extension. If no suitable content types\n     * are found, 'application/octet-stream' is used as the default content type\n     *\n     * @param {String} extension Extension to be checked for\n     * @return {String} File extension\n     */\n    detectMimeType(extension) {\n        extension = (extension || '').toString().toLowerCase().replace(/\\s/g, '').replace(/^\\./g, '').split('.').pop();\n\n        if (!(extension in mimetypes.extensions)) {\n            return 'application/octet-stream';\n        }\n\n        if (typeof mimetypes.extensions[extension] === 'string') {\n            return mimetypes.extensions[extension];\n        }\n\n        let mimeParts;\n\n        // search for name match\n        for (let i = 0, len = mimetypes.extensions[extension].length; i < len; i++) {\n            mimeParts = mimetypes.extensions[extension][i].split('/');\n            if (mimeParts[1] === extension) {\n                return mimetypes.extensions[extension][i];\n            }\n        }\n\n        // use the first one\n        return mimetypes.extensions[extension][0];\n    }\n\n    /**\n     * Folds long lines, useful for folding header lines (afterSpace=false) and\n     * flowed text (afterSpace=true)\n     *\n     * @param {String} str String to be folded\n     * @param {Number} [lineLength=76] Maximum length of a line\n     * @param {Boolean} afterSpace If true, leave a space in th end of a line\n     * @return {String} String with folded lines\n     */\n    foldLines(str, lineLength, afterSpace) {\n        str = (str || '').toString();\n        lineLength = lineLength || 76;\n\n        let pos = 0,\n            len = str.length,\n            result = '',\n            line,\n            match;\n\n        while (pos < len) {\n            line = str.substr(pos, lineLength);\n            if (line.length < lineLength) {\n                result += line;\n                break;\n            }\n            if ((match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/))) {\n                line = match[0];\n                result += line;\n                pos += line.length;\n                continue;\n            } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {\n                line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));\n            } else if ((match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/))) {\n                line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));\n            }\n\n            result += line;\n            pos += line.length;\n            if (pos < len) {\n                result += '\\r\\n';\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n     *\n     * @param {String} str Mime encoded string to be split up\n     * @param {Number} maxlen Maximum length of characters for one part (minimum 12)\n     * @return {Array} Split string\n     */\n    splitMimeEncodedString(str, maxlen) {\n        let curLine,\n            match,\n            chr,\n            done,\n            lines = [];\n\n        // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n        maxlen = Math.max(maxlen || 0, 12);\n\n        while (str.length) {\n            curLine = str.substr(0, maxlen);\n\n            // move incomplete escaped char back to main\n            if ((match = curLine.match(/[=][0-9A-F]?$/i))) {\n                curLine = curLine.substr(0, match.index);\n            }\n\n            done = false;\n            while (!done) {\n                done = true;\n                // check if not middle of a unicode char sequence\n                if ((match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i))) {\n                    chr = parseInt(match[1], 16);\n                    // invalid sequence, move one char back anc recheck\n                    if (chr < 0xc2 && chr > 0x7f) {\n                        curLine = curLine.substr(0, curLine.length - 3);\n                        done = false;\n                    }\n                }\n            }\n\n            if (curLine.length) {\n                lines.push(curLine);\n            }\n            str = str.substr(curLine.length);\n        }\n\n        return lines;\n    }\n\n    encodeURICharComponent(chr) {\n        let res = '';\n        let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n\n        if (ord.length % 2) {\n            ord = '0' + ord;\n        }\n\n        if (ord.length > 2) {\n            for (let i = 0, len = ord.length / 2; i < len; i++) {\n                res += '%' + ord.substr(i, 2);\n            }\n        } else {\n            res += '%' + ord;\n        }\n\n        return res;\n    }\n\n    safeEncodeURIComponent(str) {\n        str = (str || '').toString();\n\n        try {\n            // might throw if we try to encode invalid sequences, eg. partial emoji\n            str = encodeURIComponent(str);\n        } catch (E) {\n            // should never run\n            return str.replace(/[^\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]+/g, '');\n        }\n\n        // ensure chars that are not handled by encodeURICompent are converted as well\n        return str.replace(/[\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]/g, chr => this.encodeURICharComponent(chr));\n    }\n}\n\nmodule.exports = new Libmime();\nmodule.exports.Libmime = Libmime;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":707,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":708,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":709,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":710,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":711,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":712,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":713,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":714,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":715,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":716,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":717,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":718,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":719,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":720,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":721,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":722,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":723,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":724,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":725,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":726,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":727,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":728,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":729,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":730,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":731,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":732,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":733,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":734,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":735,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":736,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":737,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":738,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":739,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":740,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":741,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":742,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":743,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":744,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":745,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":746,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":747,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":748,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":749,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":750,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":751,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":752,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":753,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":754,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":755,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":756,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":757,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":758,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":759,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":760,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":761,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":762,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":763,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":764,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":765,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":766,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":767,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":768,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":769,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":770,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":771,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":772,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":773,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":774,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":775,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":776,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":777,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":778,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":779,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":780,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":781,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":782,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":783,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":784,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":785,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":786,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":787,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":788,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":789,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":790,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":791,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":792,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":793,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":794,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":795,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":796,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":797,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":798,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":799,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":800,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":801,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":802,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":803,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":804,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":805,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":806,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":807,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":808,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":809,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":810,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":811,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":812,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":813,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":814,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":815,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":816,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":817,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":818,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":819,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":820,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":821,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":822,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":823,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":824,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":825,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":826,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":827,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":828,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":829,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":830,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":831,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":832,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":833,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":834,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":835,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":836,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":837,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":838,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":839,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":840,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":841,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":842,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":843,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":844,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":845,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":846,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":847,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":848,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":849,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":850,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":851,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":852,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":853,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":854,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":855,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":856,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":857,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":858,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":859,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":860,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":861,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":862,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":863,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":864,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":865,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":866,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":867,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":868,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":869,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":870,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":871,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":872,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":873,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":874,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":875,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":876,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":877,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":878,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":879,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":880,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":881,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":882,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":883,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":884,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":885,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":886,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":887,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":888,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":889,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":890,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":891,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":892,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":893,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":894,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":895,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":896,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":897,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":898,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":899,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":900,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":901,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":902,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":903,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/libmime/lib/libmime.js","original":{"line":904,"column":0},"generated":{"line":905,"column":0}}],"sources":{"../node_modules/libmime/lib/libmime.js":"/* eslint no-control-regex: 0, no-div-regex: 0, quotes: 0 */\n'use strict';\n\nconst libcharset = require('./charset');\nconst libbase64 = require('libbase64');\nconst libqp = require('libqp');\nconst mimetypes = require('./mimetypes');\n\nconst STAGE_KEY = 0x1001;\nconst STAGE_VALUE = 0x1002;\n\nclass Libmime {\n    constructor(config) {\n        this.config = config || {};\n    }\n\n    /**\n     * Checks if a value is plaintext string (uses only printable 7bit chars)\n     *\n     * @param {String} value String to be tested\n     * @returns {Boolean} true if it is a plaintext string\n     */\n    isPlainText(value) {\n        if (typeof value !== 'string' || /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\u0080-\\uFFFF]/.test(value)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Checks if a multi line string containes lines longer than the selected value.\n     *\n     * Useful when detecting if a mail message needs any processing at all â€“\n     * if only plaintext characters are used and lines are short, then there is\n     * no need to encode the values in any way. If the value is plaintext but has\n     * longer lines then allowed, then use format=flowed\n     *\n     * @param {Number} lineLength Max line length to check for\n     * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars\n     */\n    hasLongerLines(str, lineLength) {\n        return new RegExp('^.{' + (lineLength + 1) + ',}', 'm').test(str);\n    }\n\n    /**\n     * Decodes a string from a format=flowed soft wrapping.\n     *\n     * @param {String} str Plaintext string with format=flowed to decode\n     * @param {Boolean} [delSp] If true, delete leading spaces (delsp=yes)\n     * @return {String} Mime decoded string\n     */\n    decodeFlowed(str, delSp) {\n        str = (str || '').toString();\n\n        return (\n            str\n                .split(/\\r?\\n/)\n                // remove soft linebreaks\n                // soft linebreaks are added after space symbols\n                .reduce((previousValue, currentValue) => {\n                    if (/ $/.test(previousValue) && !/(^|\\n)-- $/.test(previousValue)) {\n                        if (delSp) {\n                            // delsp adds space to text to be able to fold it\n                            // these spaces can be removed once the text is unfolded\n                            return previousValue.slice(0, -1) + currentValue;\n                        } else {\n                            return previousValue + currentValue;\n                        }\n                    } else {\n                        return previousValue + '\\n' + currentValue;\n                    }\n                })\n                // remove whitespace stuffing\n                // http://tools.ietf.org/html/rfc3676#section-4.4\n                .replace(/^ /gm, '')\n        );\n    }\n\n    /**\n     * Adds soft line breaks to content marked with format=flowed to\n     * ensure that no line in the message is never longer than lineLength\n     *\n     * @param {String} str Plaintext string that requires wrapping\n     * @param {Number} [lineLength=76] Maximum length of a line\n     * @return {String} String with forced line breaks\n     */\n    encodeFlowed(str, lineLength) {\n        lineLength = lineLength || 76;\n\n        let flowed = [];\n        str.split(/\\r?\\n/).forEach(line => {\n            flowed.push(\n                this.foldLines(\n                    line\n                        // space stuffing http://tools.ietf.org/html/rfc3676#section-4.2\n                        .replace(/^( |From|>)/gim, ' $1'),\n                    lineLength,\n                    true\n                )\n            );\n        });\n        return flowed.join('\\r\\n');\n    }\n\n    /**\n     * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @return {String} Single or several mime words joined together\n     */\n    encodeWord(data, mimeWordEncoding, maxLength) {\n        mimeWordEncoding = (mimeWordEncoding || 'Q').toString().toUpperCase().trim().charAt(0);\n        maxLength = maxLength || 0;\n\n        let encodedStr;\n        let toCharset = 'UTF-8';\n\n        if (maxLength && maxLength > 7 + toCharset.length) {\n            maxLength -= 7 + toCharset.length;\n        }\n\n        if (mimeWordEncoding === 'Q') {\n            // https://tools.ietf.org/html/rfc2047#section-5 rule (3)\n            encodedStr = libqp.encode(data).replace(/[^a-z0-9!*+\\-/=]/gi, chr => {\n                let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n                if (chr === ' ') {\n                    return '_';\n                } else {\n                    return '=' + (ord.length === 1 ? '0' + ord : ord);\n                }\n            });\n        } else if (mimeWordEncoding === 'B') {\n            encodedStr = typeof data === 'string' ? data : libbase64.encode(data);\n            maxLength = maxLength ? Math.max(3, ((maxLength - (maxLength % 4)) / 4) * 3) : 0;\n        }\n\n        if (maxLength && (mimeWordEncoding !== 'B' ? encodedStr : libbase64.encode(data)).length > maxLength) {\n            if (mimeWordEncoding === 'Q') {\n                encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n            } else {\n                // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences\n                let parts = [];\n                let lpart = '';\n                for (let i = 0, len = encodedStr.length; i < len; i++) {\n                    let chr = encodedStr.charAt(i);\n                    // check if we can add this character to the existing string\n                    // without breaking byte length limit\n                    if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {\n                        lpart += chr;\n                    } else {\n                        // we hit the length limit, so push the existing string and start over\n                        parts.push(libbase64.encode(lpart));\n                        lpart = chr;\n                    }\n                }\n                if (lpart) {\n                    parts.push(libbase64.encode(lpart));\n                }\n\n                if (parts.length > 1) {\n                    encodedStr = parts.join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n                } else {\n                    encodedStr = parts.join('');\n                }\n            }\n        } else if (mimeWordEncoding === 'B') {\n            encodedStr = libbase64.encode(data);\n        }\n\n        return '=?' + toCharset + '?' + mimeWordEncoding + '?' + encodedStr + (encodedStr.substr(-2) === '?=' ? '' : '?=');\n    }\n\n    /**\n     * Decode a complete mime word encoded string\n     *\n     * @param {String} str Mime word encoded string\n     * @return {String} Decoded unicode string\n     */\n    decodeWord(charset, encoding, str) {\n        // RFC2231 added language tag to the encoding\n        // see: https://tools.ietf.org/html/rfc2231#section-5\n        // this implementation silently ignores this tag\n        let splitPos = charset.indexOf('*');\n        if (splitPos >= 0) {\n            charset = charset.substr(0, splitPos);\n        }\n        charset = libcharset.normalizeCharset(charset);\n\n        encoding = encoding.toUpperCase();\n\n        if (encoding === 'Q') {\n            str = str\n                // remove spaces between = and hex char, this might indicate invalidly applied line splitting\n                .replace(/=\\s+([0-9a-fA-F])/g, '=$1')\n                // convert all underscores to spaces\n                .replace(/[_\\s]/g, ' ');\n\n            let buf = Buffer.from(str);\n            let bytes = [];\n            for (let i = 0, len = buf.length; i < len; i++) {\n                let c = buf[i];\n                if (i <= len - 2 && c === 0x3d /* = */) {\n                    let c1 = this.getHex(buf[i + 1]);\n                    let c2 = this.getHex(buf[i + 2]);\n                    if (c1 && c2) {\n                        let c = parseInt(c1 + c2, 16);\n                        bytes.push(c);\n                        i += 2;\n                        continue;\n                    }\n                }\n                bytes.push(c);\n            }\n            str = Buffer.from(bytes);\n        } else if (encoding === 'B') {\n            str = Buffer.concat(\n                str\n                    .split('=')\n                    .filter(s => s !== '') // filter empty string\n                    .map(str => Buffer.from(str, 'base64'))\n            );\n        } else {\n            // keep as is, convert Buffer to unicode string, assume utf8\n            str = Buffer.from(str);\n        }\n\n        return libcharset.decode(str, charset);\n    }\n\n    /**\n     * Finds word sequences with non ascii text and converts these to mime words\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @param {String} [fromCharset='UTF-8'] Source sharacter set\n     * @return {String} String with possible mime words\n     */\n    encodeWords(data, mimeWordEncoding, maxLength, fromCharset) {\n        if (!fromCharset && typeof maxLength === 'string' && !maxLength.match(/^[0-9]+$/)) {\n            fromCharset = maxLength;\n            maxLength = undefined;\n        }\n\n        maxLength = maxLength || 0;\n\n        let decodedValue = libcharset.decode(libcharset.convert(data || '', fromCharset));\n        let encodedValue;\n\n        let firstMatch = decodedValue.match(/(?:^|\\s)([^\\s]*[\\u0080-\\uFFFF])/);\n        if (!firstMatch) {\n            return decodedValue;\n        }\n        let lastMatch = decodedValue.match(/([\\u0080-\\uFFFF][^\\s]*)[^\\u0080-\\uFFFF]*$/);\n        if (!lastMatch) {\n            // should not happen\n            return decodedValue;\n        }\n        let startIndex =\n            firstMatch.index +\n            (\n                firstMatch[0].match(/[^\\s]/) || {\n                    index: 0\n                }\n            ).index;\n        let endIndex = lastMatch.index + (lastMatch[1] || '').length;\n\n        encodedValue =\n            (startIndex ? decodedValue.substr(0, startIndex) : '') +\n            this.encodeWord(decodedValue.substring(startIndex, endIndex), mimeWordEncoding || 'Q', maxLength) +\n            (endIndex < decodedValue.length ? decodedValue.substr(endIndex) : '');\n\n        return encodedValue;\n    }\n\n    /**\n     * Decode a string that might include one or several mime words\n     *\n     * @param {String} str String including some mime words that will be encoded\n     * @return {String} Decoded unicode string\n     */\n    decodeWords(str) {\n        return (\n            (str || '')\n                .toString()\n                // find base64 words that can be joined\n                .replace(/(=\\?([^?]+)\\?[Bb]\\?[^?]*\\?=)\\s*(?==\\?([^?]+)\\?[Bb]\\?[^?]*\\?=)/g, (match, left, chLeft, chRight) => {\n                    // only mark b64 chunks to be joined if charsets match\n                    if (libcharset.normalizeCharset(chLeft || '') === libcharset.normalizeCharset(chRight || '')) {\n                        // set a joiner marker\n                        return left + '__\\x00JOIN\\x00__';\n                    }\n                    return match;\n                })\n                // find QP words that can be joined\n                .replace(/(=\\?([^?]+)\\?[Qq]\\?[^?]*\\?=)\\s*(?==\\?([^?]+)\\?[Qq]\\?[^?]*\\?=)/g, (match, left, chLeft, chRight) => {\n                    // only mark QP chunks to be joined if charsets match\n                    if (libcharset.normalizeCharset(chLeft || '') === libcharset.normalizeCharset(chRight || '')) {\n                        // set a joiner marker\n                        return left + '__\\x00JOIN\\x00__';\n                    }\n                    return match;\n                })\n                // join base64 encoded words\n                .replace(/(\\?=)?__\\x00JOIN\\x00__(=\\?([^?]+)\\?[QqBb]\\?)?/g, '')\n                // remove spaces between mime encoded words\n                .replace(/(=\\?[^?]+\\?[QqBb]\\?[^?]*\\?=)\\s+(?==\\?[^?]+\\?[QqBb]\\?[^?]*\\?=)/g, '$1')\n                // decode words\n                .replace(/=\\?([\\w_\\-*]+)\\?([QqBb])\\?([^?]*)\\?=/g, (m, charset, encoding, text) => this.decodeWord(charset, encoding, text))\n        );\n    }\n\n    getHex(c) {\n        if ((c >= 0x30 /* 0 */ && c <= 0x39) /* 9 */ || (c >= 0x61 /* a */ && c <= 0x66) /* f */ || (c >= 0x41 /* A */ && c <= 0x46) /* F */) {\n            return String.fromCharCode(c);\n        }\n        return false;\n    }\n\n    /**\n     * Splits a string by :\n     * The result is not mime word decoded, you need to do your own decoding based\n     * on the rules for the specific header key\n     *\n     * @param {String} headerLine Single header line, might include linebreaks as well if folded\n     * @return {Object} And object of {key, value}\n     */\n    decodeHeader(headerLine) {\n        let line = (headerLine || '')\n                .toString()\n                .replace(/(?:\\r?\\n|\\r)[ \\t]*/g, ' ')\n                .trim(),\n            match = line.match(/^\\s*([^:]+):(.*)$/),\n            key = ((match && match[1]) || '').trim().toLowerCase(),\n            value = ((match && match[2]) || '').trim();\n\n        return {\n            key,\n            value\n        };\n    }\n\n    /**\n     * Parses a block of header lines. Does not decode mime words as every\n     * header might have its own rules (eg. formatted email addresses and such)\n     *\n     * @param {String} headers Headers string\n     * @return {Object} An object of headers, where header keys are object keys. NB! Several values with the same key make up an Array\n     */\n    decodeHeaders(headers) {\n        let lines = headers.split(/\\r?\\n|\\r/),\n            headersObj = {},\n            header,\n            i,\n            len;\n\n        for (i = lines.length - 1; i >= 0; i--) {\n            if (i && lines[i].match(/^\\s/)) {\n                lines[i - 1] += '\\r\\n' + lines[i];\n                lines.splice(i, 1);\n            }\n        }\n\n        for (i = 0, len = lines.length; i < len; i++) {\n            header = this.decodeHeader(lines[i]);\n            if (!headersObj[header.key]) {\n                headersObj[header.key] = [header.value];\n            } else {\n                headersObj[header.key].push(header.value);\n            }\n        }\n\n        return headersObj;\n    }\n\n    /**\n     * Joins parsed header value together as 'value; param1=value1; param2=value2'\n     * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.\n     *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n     * @param {Object} structured Parsed header value\n     * @return {String} joined header value\n     */\n    buildHeaderValue(structured) {\n        let paramsArray = [];\n\n        Object.keys(structured.params || {}).forEach(param => {\n            // filename might include unicode characters so it is a special case\n            let value = structured.params[param];\n            if (!this.isPlainText(value) || value.length >= 75) {\n                this.buildHeaderParam(param, value, 50).forEach(encodedParam => {\n                    if (!/[\\s\"\\\\;:/=(),<>@[\\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === '*') {\n                        paramsArray.push(encodedParam.key + '=' + encodedParam.value);\n                    } else {\n                        paramsArray.push(encodedParam.key + '=' + JSON.stringify(encodedParam.value));\n                    }\n                });\n            } else if (/[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(value)) {\n                paramsArray.push(param + '=' + JSON.stringify(value));\n            } else {\n                paramsArray.push(param + '=' + value);\n            }\n        });\n\n        return structured.value + (paramsArray.length ? '; ' + paramsArray.join('; ') : '');\n    }\n\n    /**\n     * Parses a header value with key=value arguments into a structured\n     * object.\n     *\n     *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->\n     *   {\n     *     'value': 'text/plain',\n     *     'params': {\n     *       'charset': 'UTF-8'\n     *     }\n     *   }\n     *\n     * @param {String} str Header value\n     * @return {Object} Header value as a parsed structure\n     */\n    parseHeaderValue(str) {\n        let response = {\n            value: false,\n            params: {}\n        };\n        let key = false;\n        let value = '';\n        let stage = STAGE_VALUE;\n\n        let quote = false;\n        let escaped = false;\n        let chr;\n\n        for (let i = 0, len = str.length; i < len; i++) {\n            chr = str.charAt(i);\n            switch (stage) {\n                case STAGE_KEY:\n                    if (chr === '=') {\n                        key = value.trim().toLowerCase();\n                        stage = STAGE_VALUE;\n                        value = '';\n                        break;\n                    }\n                    value += chr;\n                    break;\n                case STAGE_VALUE:\n                    if (escaped) {\n                        value += chr;\n                    } else if (chr === '\\\\') {\n                        escaped = true;\n                        continue;\n                    } else if (quote && chr === quote) {\n                        quote = false;\n                    } else if (!quote && chr === '\"') {\n                        quote = chr;\n                    } else if (!quote && chr === ';') {\n                        if (key === false) {\n                            response.value = value.trim();\n                        } else {\n                            response.params[key] = value.trim();\n                        }\n                        stage = STAGE_KEY;\n                        value = '';\n                    } else {\n                        value += chr;\n                    }\n                    escaped = false;\n                    break;\n            }\n        }\n\n        // finalize remainder\n        value = value.trim();\n        if (stage === STAGE_VALUE) {\n            if (key === false) {\n                // default value\n                response.value = value;\n            } else {\n                // subkey value\n                response.params[key] = value;\n            }\n        } else if (value) {\n            // treat as key without value, see emptykey:\n            // Header-Key: somevalue; key=value; emptykey\n            response.params[value.toLowerCase()] = '';\n        }\n\n        // handle parameter value continuations\n        // https://tools.ietf.org/html/rfc2231#section-3\n\n        // preprocess values\n        Object.keys(response.params).forEach(key => {\n            let actualKey;\n            let nr;\n            let value;\n\n            let match = key.match(/\\*((\\d+)\\*?)?$/);\n\n            if (!match) {\n                // nothing to do here, does not seem like a continuation param\n                return;\n            }\n\n            actualKey = key.substr(0, match.index).toLowerCase();\n            nr = Number(match[2]) || 0;\n\n            if (!response.params[actualKey] || typeof response.params[actualKey] !== 'object') {\n                response.params[actualKey] = {\n                    charset: false,\n                    values: []\n                };\n            }\n\n            value = response.params[key];\n\n            if (nr === 0 && match[0].charAt(match[0].length - 1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\n                response.params[actualKey].charset = match[1] || 'utf-8';\n                value = match[2];\n            }\n\n            response.params[actualKey].values.push({ nr, value });\n\n            // remove the old reference\n            delete response.params[key];\n        });\n\n        // concatenate split rfc2231 strings and convert encoded strings to mime encoded words\n        Object.keys(response.params).forEach(key => {\n            let value;\n            if (response.params[key] && Array.isArray(response.params[key].values)) {\n                value = response.params[key].values\n                    .sort((a, b) => a.nr - b.nr)\n                    .map(val => (val && val.value) || '')\n                    .join('');\n\n                if (response.params[key].charset) {\n                    // convert \"%AB\" to \"=?charset?Q?=AB?=\" and then to unicode\n                    response.params[key] = this.decodeWords(\n                        '=?' +\n                            response.params[key].charset +\n                            '?Q?' +\n                            value\n                                // fix invalidly encoded chars\n                                .replace(/[=?_\\s]/g, s => {\n                                    let c = s.charCodeAt(0).toString(16);\n                                    if (s === ' ') {\n                                        return '_';\n                                    } else {\n                                        return '%' + (c.length < 2 ? '0' : '') + c;\n                                    }\n                                })\n                                // change from urlencoding to percent encoding\n                                .replace(/%/g, '=') +\n                            '?='\n                    );\n                } else {\n                    response.params[key] = this.decodeWords(value);\n                }\n            }\n        });\n\n        return response;\n    }\n\n    /**\n     * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)\n     * Useful for splitting long parameter values.\n     *\n     * For example\n     *      title=\"unicode string\"\n     * becomes\n     *     title*0*=utf-8''unicode\n     *     title*1*=%20string\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {Number} [maxLength=50] Max length for generated chunks\n     * @param {String} [fromCharset='UTF-8'] Source sharacter set\n     * @return {Array} A list of encoded keys and headers\n     */\n    buildHeaderParam(key, data, maxLength, fromCharset) {\n        let list = [];\n        let encodedStr = typeof data === 'string' ? data : this.decode(data, fromCharset);\n        let encodedStrArr;\n        let chr, ord;\n        let line;\n        let startPos = 0;\n        let isEncoded = false;\n        let i, len;\n\n        maxLength = maxLength || 50;\n\n        // process ascii only text\n        if (this.isPlainText(data)) {\n            // check if conversion is even needed\n            if (encodedStr.length <= maxLength) {\n                return [\n                    {\n                        key,\n                        value: encodedStr\n                    }\n                ];\n            }\n\n            encodedStr = encodedStr.replace(new RegExp('.{' + maxLength + '}', 'g'), str => {\n                list.push({\n                    line: str\n                });\n                return '';\n            });\n\n            if (encodedStr) {\n                list.push({\n                    line: encodedStr\n                });\n            }\n        } else {\n            if (/[\\uD800-\\uDBFF]/.test(encodedStr)) {\n                // string containts surrogate pairs, so normalize it to an array of bytes\n                encodedStrArr = [];\n                for (i = 0, len = encodedStr.length; i < len; i++) {\n                    chr = encodedStr.charAt(i);\n                    ord = chr.charCodeAt(0);\n                    if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {\n                        chr += encodedStr.charAt(i + 1);\n                        encodedStrArr.push(chr);\n                        i++;\n                    } else {\n                        encodedStrArr.push(chr);\n                    }\n                }\n                encodedStr = encodedStrArr;\n            }\n\n            // first line includes the charset and language info and needs to be encoded\n            // even if it does not contain any unicode characters\n            line = \"utf-8''\";\n            isEncoded = true;\n            startPos = 0;\n\n            // process text with unicode or special chars\n            for (i = 0, len = encodedStr.length; i < len; i++) {\n                chr = encodedStr[i];\n\n                if (isEncoded) {\n                    chr = this.safeEncodeURIComponent(chr);\n                } else {\n                    // try to urlencode current char\n                    chr = chr === ' ' ? chr : this.safeEncodeURIComponent(chr);\n                    // By default it is not required to encode a line, the need\n                    // only appears when the string contains unicode or special chars\n                    // in this case we start processing the line over and encode all chars\n                    if (chr !== encodedStr[i]) {\n                        // Check if it is even possible to add the encoded char to the line\n                        // If not, there is no reason to use this line, just push it to the list\n                        // and start a new line with the char that needs encoding\n                        if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {\n                            list.push({\n                                line,\n                                encoded: isEncoded\n                            });\n                            line = '';\n                            startPos = i - 1;\n                        } else {\n                            isEncoded = true;\n                            i = startPos;\n                            line = '';\n                            continue;\n                        }\n                    }\n                }\n\n                // if the line is already too long, push it to the list and start a new one\n                if ((line + chr).length >= maxLength) {\n                    list.push({\n                        line,\n                        encoded: isEncoded\n                    });\n                    line = chr = encodedStr[i] === ' ' ? ' ' : this.safeEncodeURIComponent(encodedStr[i]);\n                    if (chr === encodedStr[i]) {\n                        isEncoded = false;\n                        startPos = i - 1;\n                    } else {\n                        isEncoded = true;\n                    }\n                } else {\n                    line += chr;\n                }\n            }\n\n            if (line) {\n                list.push({\n                    line,\n                    encoded: isEncoded\n                });\n            }\n        }\n\n        return list.map((item, i) => ({\n            // encoded lines: {name}*{part}*\n            // unencoded lines: {name}*{part}\n            // if any line needs to be encoded then the first line (part==0) is always encoded\n            key: key + '*' + i + (item.encoded ? '*' : ''),\n            value: item.line\n        }));\n    }\n\n    /**\n     * Returns file extension for a content type string. If no suitable extensions\n     * are found, 'bin' is used as the default extension\n     *\n     * @param {String} mimeType Content type to be checked for\n     * @return {String} File extension\n     */\n    detectExtension(mimeType) {\n        mimeType = (mimeType || '').toString().toLowerCase().replace(/\\s/g, '');\n        if (!(mimeType in mimetypes.list)) {\n            return 'bin';\n        }\n\n        if (typeof mimetypes.list[mimeType] === 'string') {\n            return mimetypes.list[mimeType];\n        }\n\n        let mimeParts = mimeType.split('/');\n\n        // search for name match\n        for (let i = 0, len = mimetypes.list[mimeType].length; i < len; i++) {\n            if (mimeParts[1] === mimetypes.list[mimeType][i]) {\n                return mimetypes.list[mimeType][i];\n            }\n        }\n\n        // use the first one\n        return mimetypes.list[mimeType][0] !== '*' ? mimetypes.list[mimeType][0] : 'bin';\n    }\n\n    /**\n     * Returns content type for a file extension. If no suitable content types\n     * are found, 'application/octet-stream' is used as the default content type\n     *\n     * @param {String} extension Extension to be checked for\n     * @return {String} File extension\n     */\n    detectMimeType(extension) {\n        extension = (extension || '').toString().toLowerCase().replace(/\\s/g, '').replace(/^\\./g, '').split('.').pop();\n\n        if (!(extension in mimetypes.extensions)) {\n            return 'application/octet-stream';\n        }\n\n        if (typeof mimetypes.extensions[extension] === 'string') {\n            return mimetypes.extensions[extension];\n        }\n\n        let mimeParts;\n\n        // search for name match\n        for (let i = 0, len = mimetypes.extensions[extension].length; i < len; i++) {\n            mimeParts = mimetypes.extensions[extension][i].split('/');\n            if (mimeParts[1] === extension) {\n                return mimetypes.extensions[extension][i];\n            }\n        }\n\n        // use the first one\n        return mimetypes.extensions[extension][0];\n    }\n\n    /**\n     * Folds long lines, useful for folding header lines (afterSpace=false) and\n     * flowed text (afterSpace=true)\n     *\n     * @param {String} str String to be folded\n     * @param {Number} [lineLength=76] Maximum length of a line\n     * @param {Boolean} afterSpace If true, leave a space in th end of a line\n     * @return {String} String with folded lines\n     */\n    foldLines(str, lineLength, afterSpace) {\n        str = (str || '').toString();\n        lineLength = lineLength || 76;\n\n        let pos = 0,\n            len = str.length,\n            result = '',\n            line,\n            match;\n\n        while (pos < len) {\n            line = str.substr(pos, lineLength);\n            if (line.length < lineLength) {\n                result += line;\n                break;\n            }\n            if ((match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/))) {\n                line = match[0];\n                result += line;\n                pos += line.length;\n                continue;\n            } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {\n                line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));\n            } else if ((match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/))) {\n                line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));\n            }\n\n            result += line;\n            pos += line.length;\n            if (pos < len) {\n                result += '\\r\\n';\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n     *\n     * @param {String} str Mime encoded string to be split up\n     * @param {Number} maxlen Maximum length of characters for one part (minimum 12)\n     * @return {Array} Split string\n     */\n    splitMimeEncodedString(str, maxlen) {\n        let curLine,\n            match,\n            chr,\n            done,\n            lines = [];\n\n        // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n        maxlen = Math.max(maxlen || 0, 12);\n\n        while (str.length) {\n            curLine = str.substr(0, maxlen);\n\n            // move incomplete escaped char back to main\n            if ((match = curLine.match(/[=][0-9A-F]?$/i))) {\n                curLine = curLine.substr(0, match.index);\n            }\n\n            done = false;\n            while (!done) {\n                done = true;\n                // check if not middle of a unicode char sequence\n                if ((match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i))) {\n                    chr = parseInt(match[1], 16);\n                    // invalid sequence, move one char back anc recheck\n                    if (chr < 0xc2 && chr > 0x7f) {\n                        curLine = curLine.substr(0, curLine.length - 3);\n                        done = false;\n                    }\n                }\n            }\n\n            if (curLine.length) {\n                lines.push(curLine);\n            }\n            str = str.substr(curLine.length);\n        }\n\n        return lines;\n    }\n\n    encodeURICharComponent(chr) {\n        let res = '';\n        let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n\n        if (ord.length % 2) {\n            ord = '0' + ord;\n        }\n\n        if (ord.length > 2) {\n            for (let i = 0, len = ord.length / 2; i < len; i++) {\n                res += '%' + ord.substr(i, 2);\n            }\n        } else {\n            res += '%' + ord;\n        }\n\n        return res;\n    }\n\n    safeEncodeURIComponent(str) {\n        str = (str || '').toString();\n\n        try {\n            // might throw if we try to encode invalid sequences, eg. partial emoji\n            str = encodeURIComponent(str);\n        } catch (E) {\n            // should never run\n            return str.replace(/[^\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]+/g, '');\n        }\n\n        // ensure chars that are not handled by encodeURICompent are converted as well\n        return str.replace(/[\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]/g, chr => this.encodeURICharComponent(chr));\n    }\n}\n\nmodule.exports = new Libmime();\nmodule.exports.Libmime = Libmime;\n"},"lineCount":905}},"error":null,"hash":"9ea473d495a452b2f4750e71975dbc19","cacheData":{"env":{}}}