{"id":"../node_modules/libqp/lib/libqp.js","dependencies":[{"name":"/var/www/html/StMichel/package.json","includedInParent":true,"mtime":1602507593919},{"name":"/var/www/html/StMichel/node_modules/libqp/package.json","includedInParent":true,"mtime":1602507588612},{"name":"stream","loc":{"line":3,"column":21},"parent":"/var/www/html/StMichel/node_modules/libqp/lib/libqp.js","resolved":"/home/etudiant/.npm-packages/lib/node_modules/parcel-bundler/node_modules/stream-browserify/index.js"},{"name":"util","loc":{"line":4,"column":19},"parent":"/var/www/html/StMichel/node_modules/libqp/lib/libqp.js","resolved":"/home/etudiant/.npm-packages/lib/node_modules/parcel-bundler/node_modules/util/util.js"},{"name":"buffer","parent":"/var/www/html/StMichel/node_modules/libqp/lib/libqp.js","resolved":"/home/etudiant/.npm-packages/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nvar stream = require('stream');\nvar util = require('util');\nvar Transform = stream.Transform;\n\n// expose to the world\nmodule.exports = {\n    encode: encode,\n    decode: decode,\n    wrap: wrap,\n    Encoder: Encoder,\n    Decoder: Decoder\n};\n\n/**\n * Encodes a Buffer into a Quoted-Printable encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} Quoted-Printable encoded string\n */\nfunction encode(buffer) {\n    if (typeof buffer === 'string') {\n        buffer = new Buffer(buffer, 'utf-8');\n    }\n\n    // usable characters that do not need encoding\n    var ranges = [\n        // https://tools.ietf.org/html/rfc2045#section-6.7\n        [0x09], // <TAB>\n        [0x0A], // <LF>\n        [0x0D], // <CR>\n        [0x20, 0x3C], // <SP>!\"#$%&'()*+,-./0123456789:;\n        [0x3E, 0x7E] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n    ];\n    var result = '';\n    var ord;\n\n    for (var i = 0, len = buffer.length; i < len; i++) {\n        ord = buffer[i];\n        // if the char is in allowed range, then keep as is, unless it is a ws in the end of a line\n        if (checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {\n            result += String.fromCharCode(ord);\n            continue;\n        }\n        result += '=' + (ord < 0x10 ? '0' : '') + ord.toString(16).toUpperCase();\n    }\n\n    return result;\n}\n\n/**\n * Decodes a Quoted-Printable encoded string to a Buffer object\n *\n * @param {String} str Quoted-Printable encoded string\n * @returns {Buffer} Decoded value\n */\nfunction decode(str) {\n    str = (str || '').toString().\n        // remove invalid whitespace from the end of lines\n    replace(/[\\t ]+$/gm, '').\n        // remove soft line breaks\n    replace(/\\=(?:\\r?\\n|$)/g, '');\n\n    var encodedBytesCount = (str.match(/\\=[\\da-fA-F]{2}/g) || []).length,\n        bufferLength = str.length - encodedBytesCount * 2,\n        chr, hex,\n        buffer = new Buffer(bufferLength),\n        bufferPos = 0;\n\n    for (var i = 0, len = str.length; i < len; i++) {\n        chr = str.charAt(i);\n        if (chr === '=' && (hex = str.substr(i + 1, 2)) && /[\\da-fA-F]{2}/.test(hex)) {\n            buffer[bufferPos++] = parseInt(hex, 16);\n            i += 2;\n            continue;\n        }\n        buffer[bufferPos++] = chr.charCodeAt(0);\n    }\n\n    return buffer;\n}\n\n/**\n * Adds soft line breaks to a Quoted-Printable string\n *\n * @param {String} str Quoted-Printable encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped Quoted-Printable encoded string\n */\nfunction wrap(str, lineLength) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n\n    if (str.length <= lineLength) {\n        return str;\n    }\n\n    var pos = 0,\n        len = str.length,\n        match, code, line,\n        lineMargin = Math.floor(lineLength / 3),\n        result = '';\n\n    // insert soft linebreaks where needed\n    while (pos < len) {\n        line = str.substr(pos, lineLength);\n        if ((match = line.match(/\\r\\n/))) {\n            line = line.substr(0, match.index + match[0].length);\n            result += line;\n            pos += line.length;\n            continue;\n        }\n\n        if (line.substr(-1) === '\\n') {\n            // nothing to change here\n            result += line;\n            pos += line.length;\n            continue;\n        } else if ((match = line.substr(-lineMargin).match(/\\n.*?$/))) {\n            // truncate to nearest line break\n            line = line.substr(0, line.length - (match[0].length - 1));\n            result += line;\n            pos += line.length;\n            continue;\n        } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \\t\\.,!\\?][^ \\t\\.,!\\?]*$/))) {\n            // truncate to nearest space\n            line = line.substr(0, line.length - (match[0].length - 1));\n        } else {\n            if (line.match(/\\=[\\da-f]{0,2}$/i)) {\n\n                // push incomplete encoding sequences to the next line\n                if ((match = line.match(/\\=[\\da-f]{0,1}$/i))) {\n                    line = line.substr(0, line.length - match[0].length);\n                }\n\n                // ensure that utf-8 sequences are not split\n                while (line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\\da-f]{2}){1,4}$/i) && (match = line.match(/\\=[\\da-f]{2}$/ig))) {\n                    code = parseInt(match[0].substr(1, 2), 16);\n                    if (code < 128) {\n                        break;\n                    }\n\n                    line = line.substr(0, line.length - 3);\n\n                    if (code >= 0xC0) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (pos + line.length < len && line.substr(-1) !== '\\n') {\n            if (line.length === lineLength && line.match(/\\=[\\da-f]{2}$/i)) {\n                line = line.substr(0, line.length - 3);\n            } else if (line.length === lineLength) {\n                line = line.substr(0, line.length - 1);\n            }\n            pos += line.length;\n            line += '=\\r\\n';\n        } else {\n            pos += line.length;\n        }\n\n        result += line;\n    }\n\n    return result;\n}\n\n/**\n * Helper function to check if a number is inside provided ranges\n *\n * @param {Number} nr Number to check for\n * @param {Array} ranges An Array of allowed values\n * @returns {Boolean} True if the value was found inside allowed ranges, false otherwise\n */\nfunction checkRanges(nr, ranges) {\n    for (var i = ranges.length - 1; i >= 0; i--) {\n        if (!ranges[i].length) {\n            continue;\n        }\n        if (ranges[i].length === 1 && nr === ranges[i][0]) {\n            return true;\n        }\n        if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Creates a transform stream for encoding data to Quoted-Printable encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum lenght for lines, set to false to disable wrapping\n */\nfunction Encoder(options) {\n    // init Transform\n    this.options = options || {};\n\n    if (this.options.lineLength !== false) {\n        this.options.lineLength = this.options.lineLength || 76;\n    }\n\n    this._curLine = '';\n\n    this.inputBytes = 0;\n    this.outputBytes = 0;\n\n    Transform.call(this, this.options);\n}\nutil.inherits(Encoder, Transform);\n\nEncoder.prototype._transform = function(chunk, encoding, done) {\n    var qp, _self = this;\n\n    if (encoding !== 'buffer') {\n        chunk = new Buffer(chunk, encoding);\n    }\n\n    if (!chunk || !chunk.length) {\n        return done();\n    }\n\n    this.inputBytes += chunk.length;\n\n    if (this.options.lineLength) {\n        qp = this._curLine + encode(chunk);\n        qp = wrap(qp, this.options.lineLength);\n        qp = qp.replace(/(^|\\n)([^\\n]*)$/, function(match, lineBreak, lastLine) {\n            _self._curLine = lastLine;\n            return lineBreak;\n        });\n\n        if (qp) {\n            this.outputBytes += qp.length;\n            this.push(qp);\n        }\n\n    } else {\n        qp = encode(chunk);\n        this.outputBytes += qp.length;\n        this.push(qp, 'ascii');\n    }\n\n    done();\n};\n\nEncoder.prototype._flush = function(done) {\n    if (this._curLine) {\n        this.outputBytes += this._curLine.length;\n        this.push(this._curLine, 'ascii');\n    }\n    done();\n};\n\n/**\n * Creates a transform stream for decoding Quoted-Printable encoded strings\n *\n * @constructor\n * @param {Object} options Stream options\n */\nfunction Decoder(options) {\n    // init Transform\n    this.options = options || {};\n    this._curLine = '';\n\n    this.inputBytes = 0;\n    this.outputBytes = 0;\n\n    Transform.call(this, this.options);\n}\nutil.inherits(Decoder, Transform);\n\nDecoder.prototype._transform = function(chunk, encoding, done) {\n    var qp, buf, _self = this;\n\n    chunk = chunk.toString('ascii');\n\n    if (!chunk || !chunk.length) {\n        return done();\n    }\n\n    this.inputBytes += chunk.length;\n\n    qp = (this._curLine + chunk);\n    this._curLine = '';\n    qp = qp.replace(/=[^\\n]?$/, function(lastLine) {\n        _self._curLine = lastLine;\n        return '';\n    });\n\n    if (qp) {\n        buf = decode(qp);\n        this.outputBytes += buf.length;\n        this.push(buf);\n    }\n\n    done();\n};\n\nDecoder.prototype._flush = function(done) {\n    var qp, buf;\n    if (this._curLine) {\n        buf = decode(this._curLine);\n        this.outputBytes += buf.length;\n        this.push(buf);\n    }\n    done();\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/libqp/lib/libqp.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}}],"sources":{"../node_modules/libqp/lib/libqp.js":"'use strict';\n\nvar stream = require('stream');\nvar util = require('util');\nvar Transform = stream.Transform;\n\n// expose to the world\nmodule.exports = {\n    encode: encode,\n    decode: decode,\n    wrap: wrap,\n    Encoder: Encoder,\n    Decoder: Decoder\n};\n\n/**\n * Encodes a Buffer into a Quoted-Printable encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} Quoted-Printable encoded string\n */\nfunction encode(buffer) {\n    if (typeof buffer === 'string') {\n        buffer = new Buffer(buffer, 'utf-8');\n    }\n\n    // usable characters that do not need encoding\n    var ranges = [\n        // https://tools.ietf.org/html/rfc2045#section-6.7\n        [0x09], // <TAB>\n        [0x0A], // <LF>\n        [0x0D], // <CR>\n        [0x20, 0x3C], // <SP>!\"#$%&'()*+,-./0123456789:;\n        [0x3E, 0x7E] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n    ];\n    var result = '';\n    var ord;\n\n    for (var i = 0, len = buffer.length; i < len; i++) {\n        ord = buffer[i];\n        // if the char is in allowed range, then keep as is, unless it is a ws in the end of a line\n        if (checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {\n            result += String.fromCharCode(ord);\n            continue;\n        }\n        result += '=' + (ord < 0x10 ? '0' : '') + ord.toString(16).toUpperCase();\n    }\n\n    return result;\n}\n\n/**\n * Decodes a Quoted-Printable encoded string to a Buffer object\n *\n * @param {String} str Quoted-Printable encoded string\n * @returns {Buffer} Decoded value\n */\nfunction decode(str) {\n    str = (str || '').toString().\n        // remove invalid whitespace from the end of lines\n    replace(/[\\t ]+$/gm, '').\n        // remove soft line breaks\n    replace(/\\=(?:\\r?\\n|$)/g, '');\n\n    var encodedBytesCount = (str.match(/\\=[\\da-fA-F]{2}/g) || []).length,\n        bufferLength = str.length - encodedBytesCount * 2,\n        chr, hex,\n        buffer = new Buffer(bufferLength),\n        bufferPos = 0;\n\n    for (var i = 0, len = str.length; i < len; i++) {\n        chr = str.charAt(i);\n        if (chr === '=' && (hex = str.substr(i + 1, 2)) && /[\\da-fA-F]{2}/.test(hex)) {\n            buffer[bufferPos++] = parseInt(hex, 16);\n            i += 2;\n            continue;\n        }\n        buffer[bufferPos++] = chr.charCodeAt(0);\n    }\n\n    return buffer;\n}\n\n/**\n * Adds soft line breaks to a Quoted-Printable string\n *\n * @param {String} str Quoted-Printable encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped Quoted-Printable encoded string\n */\nfunction wrap(str, lineLength) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n\n    if (str.length <= lineLength) {\n        return str;\n    }\n\n    var pos = 0,\n        len = str.length,\n        match, code, line,\n        lineMargin = Math.floor(lineLength / 3),\n        result = '';\n\n    // insert soft linebreaks where needed\n    while (pos < len) {\n        line = str.substr(pos, lineLength);\n        if ((match = line.match(/\\r\\n/))) {\n            line = line.substr(0, match.index + match[0].length);\n            result += line;\n            pos += line.length;\n            continue;\n        }\n\n        if (line.substr(-1) === '\\n') {\n            // nothing to change here\n            result += line;\n            pos += line.length;\n            continue;\n        } else if ((match = line.substr(-lineMargin).match(/\\n.*?$/))) {\n            // truncate to nearest line break\n            line = line.substr(0, line.length - (match[0].length - 1));\n            result += line;\n            pos += line.length;\n            continue;\n        } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \\t\\.,!\\?][^ \\t\\.,!\\?]*$/))) {\n            // truncate to nearest space\n            line = line.substr(0, line.length - (match[0].length - 1));\n        } else {\n            if (line.match(/\\=[\\da-f]{0,2}$/i)) {\n\n                // push incomplete encoding sequences to the next line\n                if ((match = line.match(/\\=[\\da-f]{0,1}$/i))) {\n                    line = line.substr(0, line.length - match[0].length);\n                }\n\n                // ensure that utf-8 sequences are not split\n                while (line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\\da-f]{2}){1,4}$/i) && (match = line.match(/\\=[\\da-f]{2}$/ig))) {\n                    code = parseInt(match[0].substr(1, 2), 16);\n                    if (code < 128) {\n                        break;\n                    }\n\n                    line = line.substr(0, line.length - 3);\n\n                    if (code >= 0xC0) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (pos + line.length < len && line.substr(-1) !== '\\n') {\n            if (line.length === lineLength && line.match(/\\=[\\da-f]{2}$/i)) {\n                line = line.substr(0, line.length - 3);\n            } else if (line.length === lineLength) {\n                line = line.substr(0, line.length - 1);\n            }\n            pos += line.length;\n            line += '=\\r\\n';\n        } else {\n            pos += line.length;\n        }\n\n        result += line;\n    }\n\n    return result;\n}\n\n/**\n * Helper function to check if a number is inside provided ranges\n *\n * @param {Number} nr Number to check for\n * @param {Array} ranges An Array of allowed values\n * @returns {Boolean} True if the value was found inside allowed ranges, false otherwise\n */\nfunction checkRanges(nr, ranges) {\n    for (var i = ranges.length - 1; i >= 0; i--) {\n        if (!ranges[i].length) {\n            continue;\n        }\n        if (ranges[i].length === 1 && nr === ranges[i][0]) {\n            return true;\n        }\n        if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Creates a transform stream for encoding data to Quoted-Printable encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum lenght for lines, set to false to disable wrapping\n */\nfunction Encoder(options) {\n    // init Transform\n    this.options = options || {};\n\n    if (this.options.lineLength !== false) {\n        this.options.lineLength = this.options.lineLength || 76;\n    }\n\n    this._curLine = '';\n\n    this.inputBytes = 0;\n    this.outputBytes = 0;\n\n    Transform.call(this, this.options);\n}\nutil.inherits(Encoder, Transform);\n\nEncoder.prototype._transform = function(chunk, encoding, done) {\n    var qp, _self = this;\n\n    if (encoding !== 'buffer') {\n        chunk = new Buffer(chunk, encoding);\n    }\n\n    if (!chunk || !chunk.length) {\n        return done();\n    }\n\n    this.inputBytes += chunk.length;\n\n    if (this.options.lineLength) {\n        qp = this._curLine + encode(chunk);\n        qp = wrap(qp, this.options.lineLength);\n        qp = qp.replace(/(^|\\n)([^\\n]*)$/, function(match, lineBreak, lastLine) {\n            _self._curLine = lastLine;\n            return lineBreak;\n        });\n\n        if (qp) {\n            this.outputBytes += qp.length;\n            this.push(qp);\n        }\n\n    } else {\n        qp = encode(chunk);\n        this.outputBytes += qp.length;\n        this.push(qp, 'ascii');\n    }\n\n    done();\n};\n\nEncoder.prototype._flush = function(done) {\n    if (this._curLine) {\n        this.outputBytes += this._curLine.length;\n        this.push(this._curLine, 'ascii');\n    }\n    done();\n};\n\n/**\n * Creates a transform stream for decoding Quoted-Printable encoded strings\n *\n * @constructor\n * @param {Object} options Stream options\n */\nfunction Decoder(options) {\n    // init Transform\n    this.options = options || {};\n    this._curLine = '';\n\n    this.inputBytes = 0;\n    this.outputBytes = 0;\n\n    Transform.call(this, this.options);\n}\nutil.inherits(Decoder, Transform);\n\nDecoder.prototype._transform = function(chunk, encoding, done) {\n    var qp, buf, _self = this;\n\n    chunk = chunk.toString('ascii');\n\n    if (!chunk || !chunk.length) {\n        return done();\n    }\n\n    this.inputBytes += chunk.length;\n\n    qp = (this._curLine + chunk);\n    this._curLine = '';\n    qp = qp.replace(/=[^\\n]?$/, function(lastLine) {\n        _self._curLine = lastLine;\n        return '';\n    });\n\n    if (qp) {\n        buf = decode(qp);\n        this.outputBytes += buf.length;\n        this.push(buf);\n    }\n\n    done();\n};\n\nDecoder.prototype._flush = function(done) {\n    var qp, buf;\n    if (this._curLine) {\n        buf = decode(this._curLine);\n        this.outputBytes += buf.length;\n        this.push(buf);\n    }\n    done();\n};"},"lineCount":314}},"error":null,"hash":"546fa4d712d5c456d3e9126557d2f2bf","cacheData":{"env":{}}}